from graph import Graph
from scipy import stats
import numpy as np
import itertools
import math
import sys
import os as os
import cPickle as pickle
from matplotlib import pyplot as plt
import seaborn




dir_current = os.getcwd()
dir_name = dir_current + '/figure'

# set up figure
fig = plt.figure()
#ax = fig.add_subplot(111)
ft = 15 # tick font size
fl = 16 # label font size
fs_s = 12 # small text font size
ms = 5 # marker size
lw = 3 # line width size



"""
This code shows how to use BP (sum-product alg)+ gradient ascent opt. to 
get the marginals of each kinases. 

New IC:  Ebind[0,:] = np.array([-5,-3,-3,-3]) 
original IC : Ebind[0,:] = np.array([-1,-2,-1,-1.5])

New omega" omega3 = 2, omegarest = 8 (i.e. freq3 =0.5, freqrest =0.125)
original omega: all omega = 4


"""




def conditional_prob_on(PAstate, Ematrix, Wbind, omega):
	
	"""
	The conditional prob is dependent on the biophysical model

	"""
	if isinstance(omega, float):
		omega = np.array([omega])

	omegainv= omega**-1
	num = 0.0
	den = 0.0

	


	for j in xrange(len(Ematrix)):
		num = num + omegainv[j]*np.exp(-Ematrix[j])*float(PAstate[j])
		den = den + omegainv[j]*(np.exp(-Ematrix[j])*float(PAstate[j]) + np.exp(-Wbind)*(1.0-float(PAstate[j])))
	
	return num / (1.0 + den)



"""
get_mn_log_likelihood() function is not used in this program

"""
def get_mn_log_likelihood(obs,probs):
	""" Return the (log)likelihood of obs, given the probs"""
	# Multinomial Distribution Log PMF
	# ln (pdf)      =             multinomial coeff            *   product of probabilities
	# ln[f(x|n, p)] = [ln(n!) - (ln(x1!)+ln(x2!)+...+ln(xk!))] + [x1*ln(p1)+x2*ln(p2)+...+xk*ln(pk)]     

	multinomial_coeff_denom= 0
	prod_probs = 0
	for x in range(0,len(obs)): # loop through state counts in each observation
		multinomial_coeff_denom = multinomial_coeff_denom + math.log(math.factorial(obs[x]))
		prod_probs = prod_probs + obs[x]*math.log(probs[x])
	 
	multinomial_coeff = math.log(math.factorial(sum(obs))) -  multinomial_coeff_denom
	likelihood = multinomial_coeff + prod_probs
	return likelihood


def sample_generate(margDist, Nsamples):
	""" margDist is a 2-tuple of len(margDist)
		This functions returns a sample of data generated by the marg prob specified
	"""
	xk = np.arange(2)
	margsamples = np.zeros([len(margDist), Nsamples]) 
	for tupleindex in xrange(len(margDist)):
		custm = stats.rv_discrete(name='custm', values=(xk, margDist[tupleindex]))
		margsamples[tupleindex, :]= custm.rvs(size= Nsamples)

	return margsamples


def InfoMaxGD(P1, P2, P129, P9, P123, P124, P125, P126, P127, P128, Plastlayer, bindingE, bindingW, oall, regC):

	nabla_E = np.zeros(len(bindingE))
	underflowcutoff = 0.001


	freqall= oall**-1
	delP3_12_1 = np.zeros((2,2,2), dtype = float)
	delP3_12_2 = np.zeros((2,2,2), dtype = float)
	delP4_12_1 = np.zeros((2,2,2), dtype = float)
	delP4_12_2 = np.zeros((2,2,2), dtype = float)
	delP5_12_1 = np.zeros((2,2,2), dtype = float)
	delP5_12_2 = np.zeros((2,2,2), dtype = float)
	delP6_12_1 = np.zeros((2,2,2), dtype = float)
	delP6_12_2 = np.zeros((2,2,2), dtype = float)
	delP7_12_1 = np.zeros((2,2,2), dtype = float)
	delP7_12_2 = np.zeros((2,2,2), dtype = float)	
	delP8_12_1 = np.zeros((2,2,2), dtype = float)
	delP8_12_2 = np.zeros((2,2,2), dtype = float)		
	delP9_345678_3 = np.zeros((2,2,2,2,2,2,2), dtype = float)
	delP9_345678_4 = np.zeros((2,2,2,2,2,2,2), dtype = float)
	delP9_345678_5 = np.zeros((2,2,2,2,2,2,2), dtype = float)
	delP9_345678_6 = np.zeros((2,2,2,2,2,2,2), dtype = float)
	delP9_345678_7 = np.zeros((2,2,2,2,2,2,2), dtype = float)
	delP9_345678_8 = np.zeros((2,2,2,2,2,2,2), dtype = float)
	delf912_13 = np.zeros((2,2,2), dtype = float)
	delf912_23 = np.zeros((2,2,2), dtype = float)
	delf912_14 = np.zeros((2,2,2), dtype = float)
	delf912_24 = np.zeros((2,2,2), dtype = float)
	delf912_15 = np.zeros((2,2,2), dtype = float)
	delf912_25 = np.zeros((2,2,2), dtype = float)
	delf912_16 = np.zeros((2,2,2), dtype = float)
	delf912_26 = np.zeros((2,2,2), dtype = float)
	delf912_17 = np.zeros((2,2,2), dtype = float)
	delf912_27 = np.zeros((2,2,2), dtype = float)
	delf912_18 = np.zeros((2,2,2), dtype = float)
	delf912_28 = np.zeros((2,2,2), dtype = float)
	delf912_39 = np.zeros((2,2,2), dtype = float)
	delf912_49 = np.zeros((2,2,2), dtype = float)
	delf912_59 = np.zeros((2,2,2), dtype = float)
	delf912_69 = np.zeros((2,2,2), dtype = float)
	delf912_79 = np.zeros((2,2,2), dtype = float)
	delf912_89 = np.zeros((2,2,2), dtype = float)



	for tstep in xrange(1):




		# bindingE[i]: i = 0, 1 (E31, E32, ngb of 3)
		#			       2, 3 (E41, E42, ngb of 4)
		#				   4, 5 (E51, E52, ngb of 5)
		#				   6, 7 (E61, E62, ngb of 6)
		#				   8, 9 (E73, E74, nbg of 7)
		#                 10, 11(E83, E84, nbg of 8)
		#                 12, 13, 14, 15, 16 17 (E93, E94, E95, E96, E97, E98, nbg of 9)
		

		# First evaluate the first layer derivative
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))
		for i in [3,4,5,6,7,8]:

			for j in xrange(tmp.shape[0]):
				i1 = tmp[j][0][0] # index for x1
				i2 = tmp[j][1][0] # index for x2

				if i == 3:
					estart = 0
					delP3_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP3_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

				elif i == 4:
					estart = 2

					delP4_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP4_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

				elif i == 5:
					estart = 4

					delP5_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP5_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

				elif i == 6:
					estart = 6

					delP6_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP6_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

				elif i == 7:
					estart = 8

					delP7_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP7_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

				elif i == 8:
					estart = 10

					delP8_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP8_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

		delP3_12_1[0,:,:] = 1-delP3_12_1[1,:,:]
		delP3_12_2[0,:,:] = 1-delP3_12_2[1,:,:]
		delP4_12_1[0,:,:] = 1-delP4_12_1[1,:,:]
		delP4_12_2[0,:,:] = 1-delP4_12_2[1,:,:]
		delP5_12_1[0,:,:] = 1-delP5_12_1[1,:,:]
		delP5_12_2[0,:,:] = 1-delP5_12_2[1,:,:]
		delP6_12_1[0,:,:] = 1-delP6_12_1[1,:,:]
		delP6_12_2[0,:,:] = 1-delP6_12_2[1,:,:]
		delP7_12_1[0,:,:] = 1-delP7_12_1[1,:,:]
		delP7_12_2[0,:,:] = 1-delP7_12_2[1,:,:]
		delP8_12_1[0,:,:] = 1-delP8_12_1[1,:,:]
		delP8_12_2[0,:,:] = 1-delP8_12_2[1,:,:]


		
			
		# now evaluate the derivatives of the second layer
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 6)))
		freqtmp = freqall[2] + freqall[3] + freqall[4]+ freqall[5] + freqall[6] + freqall[7]
		estart = 12
		for i in [3,4,5,6,7,8]:

			for j in xrange(tmp.shape[0]):
				i3 = tmp[j][0][0] # index for x3
				i4 = tmp[j][1][0] # index for x4
				i5 = tmp[j][2][0] # index for x5
				i6 = tmp[j][3][0] # index for x6
				i7 = tmp[j][4][0] # index for x7
				i8 = tmp[j][5][0] # index for x8

				if i == 3:
					itmp = i-1
					delP9_345678_3[1,i3,i4,i5,i6,i7,i8] = (-freqall[i-1]*np.exp(-bindingE[estart])*float(i3)*(1
					+(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[itmp]*np.exp(-bindingE[estart])*float(i3)
					+freqall[itmp+1]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[itmp+2]*np.exp(-bindingE[estart+2])*float(i5)
					+freqall[itmp+3]*np.exp(-bindingE[estart+3])*float(i6)
					+freqall[itmp+4]*np.exp(-bindingE[estart+4])*float(i7)
					+freqall[itmp+5]*np.exp(-bindingE[estart+5])*float(i8)
					+np.exp(-bindingW)*(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8)))**2)
				elif i == 4:
					itmp = i -2
					delP9_345678_4[1,i3,i4,i5,i6,i7,i8] = (-freqall[i-1]*np.exp(-bindingE[estart])*float(i4)*(1
					+(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[itmp]*np.exp(-bindingE[estart])*float(i3)
					+freqall[itmp+1]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[itmp+2]*np.exp(-bindingE[estart+2])*float(i5)
					+freqall[itmp+3]*np.exp(-bindingE[estart+3])*float(i6)
					+freqall[itmp+4]*np.exp(-bindingE[estart+4])*float(i7)
					+freqall[itmp+5]*np.exp(-bindingE[estart+5])*float(i8)
					+np.exp(-bindingW)*(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8)))**2)

				elif i == 5:
					itmp = i-3
					delP9_345678_5[1,i3,i4,i5,i6,i7,i8] = (-freqall[i-1]*np.exp(-bindingE[estart])*float(i5)*(1
					+(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[itmp]*np.exp(-bindingE[estart])*float(i3)
					+freqall[itmp+1]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[itmp+2]*np.exp(-bindingE[estart+2])*float(i5)
					+freqall[itmp+3]*np.exp(-bindingE[estart+3])*float(i6)
					+freqall[itmp+4]*np.exp(-bindingE[estart+4])*float(i7)
					+freqall[itmp+5]*np.exp(-bindingE[estart+5])*float(i8)
					+np.exp(-bindingW)*(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8)))**2)

				elif i == 6:
					itmp = i-4
					delP9_345678_6[1,i3,i4,i5,i6,i7,i8] = (-freqall[i-1]*np.exp(-bindingE[estart])*float(i6)*(1
					+(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[itmp]*np.exp(-bindingE[estart])*float(i3)
					+freqall[itmp+1]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[itmp+2]*np.exp(-bindingE[estart+2])*float(i5)
					+freqall[itmp+3]*np.exp(-bindingE[estart+3])*float(i6)
					+freqall[itmp+4]*np.exp(-bindingE[estart+4])*float(i7)
					+freqall[itmp+5]*np.exp(-bindingE[estart+5])*float(i8)
					+np.exp(-bindingW)*(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8)))**2)

				elif i == 7:
					itmp = i-5
					delP9_345678_7[1,i3,i4,i5,i6,i7,i8] = (-freqall[i-1]*np.exp(-bindingE[estart])*float(i7)*(1
					+(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[itmp]*np.exp(-bindingE[estart])*float(i3)
					+freqall[itmp+1]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[itmp+2]*np.exp(-bindingE[estart+2])*float(i5)
					+freqall[itmp+3]*np.exp(-bindingE[estart+3])*float(i6)
					+freqall[itmp+4]*np.exp(-bindingE[estart+4])*float(i7)
					+freqall[itmp+5]*np.exp(-bindingE[estart+5])*float(i8)
					+np.exp(-bindingW)*(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8)))**2)

				elif i == 8:
					itmp = i-6
					delP9_345678_8[1,i3,i4,i5,i6,i7,i8] = (-freqall[i-1]*np.exp(-bindingE[estart])*float(i8)*(1
					+(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[itmp]*np.exp(-bindingE[estart])*float(i3)
					+freqall[itmp+1]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[itmp+2]*np.exp(-bindingE[estart+2])*float(i5)
					+freqall[itmp+3]*np.exp(-bindingE[estart+3])*float(i6)
					+freqall[itmp+4]*np.exp(-bindingE[estart+4])*float(i7)
					+freqall[itmp+5]*np.exp(-bindingE[estart+5])*float(i8)
					+np.exp(-bindingW)*(freqtmp-freqall[itmp]*float(i3)-freqall[itmp+1]*float(i4)-freqall[itmp+2]*float(i5)-freqall[itmp+3]*float(i6)-freqall[itmp+4]*float(i7)-freqall[itmp+5]*float(i8)))**2)

		delP9_345678_3[0,:,:,:,:,:,:] = 1-delP9_345678_3[1,:,:,:,:,:,:]
		delP9_345678_4[0,:,:,:,:,:,:] = 1-delP9_345678_4[1,:,:,:,:,:,:]
		delP9_345678_5[0,:,:,:,:,:,:] = 1-delP9_345678_5[1,:,:,:,:,:,:]
		delP9_345678_6[0,:,:,:,:,:,:] = 1-delP9_345678_6[1,:,:,:,:,:,:]
		delP9_345678_7[0,:,:,:,:,:,:] = 1-delP9_345678_7[1,:,:,:,:,:,:]
		delP9_345678_8[0,:,:,:,:,:,:] = 1-delP9_345678_8[1,:,:,:,:,:,:]

		
		###
		### below start merging these functions to get the gradient
		###

		# do the first layer:

		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))

		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			fmerge = delP3_12_1[0, i1, i2]*Plastlayer[:,0,:,:,:,:,:] + delP3_12_1[1, i1, i2]*Plastlayer[:,1,:,:,:,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P126[0,i1,i2] + fmerge[:,1,:,:]*P126[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_13[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			fmerge = delP3_12_2[0, i1, i2]*Plastlayer[:,0,:,:,:,:,:] + delP3_12_2[1, i1, i2]*Plastlayer[:,1,:,:,:,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P126[0,i1,i2] + fmerge[:,1,:,:]*P126[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_23[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			##
			fmerge = delP4_12_1[0, i1, i2]*Plastlayer[:,:,0,:,:,:,:] + delP4_12_1[1, i1, i2]*Plastlayer[:,:,1,:,:,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P126[0,i1,i2] + fmerge[:,1,:,:]*P126[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_14[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			fmerge = delP4_12_2[0, i1, i2]*Plastlayer[:,:,0,:,:,:,:] + delP4_12_2[1, i1, i2]*Plastlayer[:,:,1,:,:,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P126[0,i1,i2] + fmerge[:,1,:,:]*P126[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_24[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			##
			fmerge = delP5_12_1[0, i1, i2]*Plastlayer[:,:,:,0,:,:,:] + delP5_12_1[1, i1, i2]*Plastlayer[:,:,:,1,:,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P126[0,i1,i2] + fmerge[:,1,:,:]*P126[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_15[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			fmerge = delP5_12_2[0, i1, i2]*Plastlayer[:,:,:,0,:,:,:] + delP5_12_2[1, i1, i2]*Plastlayer[:,:,:,1,:,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P126[0,i1,i2] + fmerge[:,1,:,:]*P126[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_25[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			##
			fmerge = delP6_12_1[0, i1, i2]*Plastlayer[:,:,:,:,0,:,:] + delP6_12_1[1, i1, i2]*Plastlayer[:,:,:,:,1,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_16[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			fmerge = delP6_12_2[0, i1, i2]*Plastlayer[:,:,:,:,0,:,:] + delP6_12_2[1, i1, i2]*Plastlayer[:,:,:,:,1,:,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:]*P127[0,i1,i2] + fmerge[:,1,:]*P127[1,i1,i2]
			delf912_26[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			#
			fmerge = delP7_12_1[0, i1, i2]*Plastlayer[:,:,:,:,:,0,:] + delP7_12_1[1, i1, i2]*Plastlayer[:,:,:,:,:,1,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:]*P126[0,i1,i2] + fmerge[:,1,:]*P126[1,i1,i2]
			delf912_17[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			fmerge = delP7_12_2[0, i1, i2]*Plastlayer[:,:,:,:,:,0,:] + delP7_12_2[1, i1, i2]*Plastlayer[:,:,:,:,:,1,:]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:]*P126[0,i1,i2] + fmerge[:,1,:]*P126[1,i1,i2]
			delf912_27[:,i1,i2] = fmerge[:,0]*P128[0,i1,i2] + fmerge[:,1]*P128[1,i1,i2]

			#
			fmerge = delP8_12_1[0, i1, i2]*Plastlayer[:,:,:,:,:,:,0] + delP8_12_1[1, i1, i2]*Plastlayer[:,:,:,:,:,:,1]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:]*P126[0,i1,i2] + fmerge[:,1,:]*P126[1,i1,i2]
			delf912_18[:,i1,i2] = fmerge[:,0]*P127[0,i1,i2] + fmerge[:,1]*P127[1,i1,i2]

			fmerge = delP8_12_2[0, i1, i2]*Plastlayer[:,:,:,:,:,:,0] + delP8_12_2[1, i1, i2]*Plastlayer[:,:,:,:,:,:,1]
			fmerge = fmerge[:,0,:,:,:,:]*P123[0,i1,i2] + fmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			fmerge = fmerge[:,0,:,:,:]*P124[0,i1,i2] + fmerge[:,1,:,:,:]*P124[1,i1,i2]
			fmerge = fmerge[:,0,:,:]*P125[0,i1,i2] + fmerge[:,1,:,:]*P125[1,i1,i2]
			fmerge = fmerge[:,0,:]*P126[0,i1,i2] + fmerge[:,1,:]*P126[1,i1,i2]
			delf912_28[:,i1,i2] = fmerge[:,0]*P127[0,i1,i2] + fmerge[:,1]*P127[1,i1,i2]


			# next deal with the second layer
			gmerge = delP9_345678_3[:,0,:,:,:,:,:]*P123[0,i1,i2] + delP9_345678_3[:,1,:,:,:,:,:]*P123[1,i1,i2] # (x9 x4 x5 x6 x7 x8)
			gmerge = gmerge[:,0,:,:,:,:]*P124[0,i1,i2]+ gmerge[:,1,:,:,:,:]*P124[1,i1,i2]
			gmerge = gmerge[:,0,:,:,:]*P125[0,i1,i2]+ gmerge[:,1,:,:,:]*P125[1,i1,i2]
			gmerge = gmerge[:,0,:,:]*P126[0,i1,i2]+ gmerge[:,1,:,:]*P126[1,i1,i2]
			gmerge = gmerge[:,0,:]*P127[0,i1,i2]+ gmerge[:,1,:]*P127[1,i1,i2]
			delf912_39[:,i1,i2] = gmerge[:,0]*P128[0,i1,i2]+ gmerge[:,1]*P128[1,i1,i2]

			#
			gmerge = delP9_345678_4[:,:,0,:,:,:,:]*P124[0,i1,i2] + delP9_345678_4[:,:,1,:,:,:,:]*P124[1,i1,i2] # (x9 x4 x5 x6 x7 x8)
			gmerge = gmerge[:,0,:,:,:,:]*P123[0,i1,i2]+ gmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			gmerge = gmerge[:,0,:,:,:]*P125[0,i1,i2]+ gmerge[:,1,:,:,:]*P125[1,i1,i2]
			gmerge = gmerge[:,0,:,:]*P126[0,i1,i2]+ gmerge[:,1,:,:]*P126[1,i1,i2]
			gmerge = gmerge[:,0,:]*P127[0,i1,i2]+ gmerge[:,1,:]*P127[1,i1,i2]
			delf912_49[:,i1,i2] = gmerge[:,0]*P128[0,i1,i2]+ gmerge[:,1]*P128[1,i1,i2]

			#
			gmerge = delP9_345678_5[:,:,:,0,:,:,:]*P125[0,i1,i2] + delP9_345678_5[:,:,:,1,:,:,:]*P125[1,i1,i2] # (x9 x4 x5 x6 x7 x8)
			gmerge = gmerge[:,0,:,:,:,:]*P123[0,i1,i2]+ gmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			gmerge = gmerge[:,0,:,:,:]*P124[0,i1,i2]+ gmerge[:,1,:,:,:]*P124[1,i1,i2]
			gmerge = gmerge[:,0,:,:]*P126[0,i1,i2]+ gmerge[:,1,:,:]*P126[1,i1,i2]
			gmerge = gmerge[:,0,:]*P127[0,i1,i2]+ gmerge[:,1,:]*P127[1,i1,i2]
			delf912_59[:,i1,i2] = gmerge[:,0]*P128[0,i1,i2]+ gmerge[:,1]*P128[1,i1,i2]

			#
			gmerge = delP9_345678_6[:,:,:,:,0,:,:]*P126[0,i1,i2] + delP9_345678_6[:,:,:,:,1,:,:]*P126[1,i1,i2] # (x9 x4 x5 x6 x7 x8)
			gmerge = gmerge[:,0,:,:,:,:]*P123[0,i1,i2]+ gmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			gmerge = gmerge[:,0,:,:,:]*P124[0,i1,i2]+ gmerge[:,1,:,:,:]*P124[1,i1,i2]
			gmerge = gmerge[:,0,:,:]*P125[0,i1,i2]+ gmerge[:,1,:,:]*P125[1,i1,i2]
			gmerge = gmerge[:,0,:]*P127[0,i1,i2]+ gmerge[:,1,:]*P127[1,i1,i2]
			delf912_69[:,i1,i2] = gmerge[:,0]*P128[0,i1,i2]+ gmerge[:,1]*P128[1,i1,i2]

			#
			gmerge = delP9_345678_7[:,:,:,:,:,0,:]*P127[0,i1,i2] + delP9_345678_7[:,:,:,:,:,1,:]*P127[1,i1,i2] # (x9 x4 x5 x6 x7 x8)
			gmerge = gmerge[:,0,:,:,:,:]*P123[0,i1,i2]+ gmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			gmerge = gmerge[:,0,:,:,:]*P124[0,i1,i2]+ gmerge[:,1,:,:,:]*P124[1,i1,i2]
			gmerge = gmerge[:,0,:,:]*P125[0,i1,i2]+ gmerge[:,1,:,:]*P125[1,i1,i2]
			gmerge = gmerge[:,0,:]*P126[0,i1,i2]+ gmerge[:,1,:]*P126[1,i1,i2]
			delf912_79[:,i1,i2] = gmerge[:,0]*P128[0,i1,i2]+ gmerge[:,1]*P128[1,i1,i2]

			#
			gmerge = delP9_345678_8[:,:,:,:,:,:,0]*P128[0,i1,i2] + delP9_345678_8[:,:,:,:,:,:,1]*P128[1,i1,i2] # (x9 x4 x5 x6 x7 x8)
			gmerge = gmerge[:,0,:,:,:,:]*P123[0,i1,i2]+ gmerge[:,1,:,:,:,:]*P123[1,i1,i2]
			gmerge = gmerge[:,0,:,:,:]*P124[0,i1,i2]+ gmerge[:,1,:,:,:]*P124[1,i1,i2]
			gmerge = gmerge[:,0,:,:]*P125[0,i1,i2]+ gmerge[:,1,:,:]*P125[1,i1,i2]
			gmerge = gmerge[:,0,:]*P126[0,i1,i2]+ gmerge[:,1,:]*P126[1,i1,i2]
			delf912_89[:,i1,i2] = gmerge[:,0]*P127[0,i1,i2]+ gmerge[:,1]*P127[1,i1,i2]



		# bindingE[i]: i = 0, 1 (E31, E32, ngb of 3)
		#			       2, 3 (E41, E42, ngb of 4)
		#				   4, 5 (E51, E52, ngb of 5)
		#				   6, 7 (E61, E62, ngb of 6)
		#				   8, 9 (E73, E74, nbg of 7)
		#                 10, 11(E83, E84, nbg of 8)
		#                 12, 13, 14, 15, 16 17 (E93, E94, E95, E96, E97, E98, nbg of 9)

		nabla_E[0] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_13[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_13[0,:,:]) + P1*(np.multiply(delf912_13[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_13[1,:,:]), axis = 0))+4*regC*nabla_E[0]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[1] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_23[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_23[0,:,:]) + P1*(np.multiply(delf912_23[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_23[1,:,:]), axis = 0))+4*regC*nabla_E[1]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[2] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_14[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_14[0,:,:]) + P1*(np.multiply(delf912_14[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_14[1,:,:]), axis = 0))+4*regC*nabla_E[2]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[3] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_24[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_24[0,:,:]) + P1*(np.multiply(delf912_24[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_24[1,:,:]), axis = 0))+4*regC*nabla_E[3]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[4] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_15[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_15[0,:,:]) + P1*(np.multiply(delf912_15[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_15[1,:,:]), axis = 0))+4*regC*nabla_E[4]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[5] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_25[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_25[0,:,:]) + P1*(np.multiply(delf912_25[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_25[1,:,:]), axis = 0))+4*regC*nabla_E[5]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[6] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_16[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_16[0,:,:]) + P1*(np.multiply(delf912_16[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_16[1,:,:]), axis = 0))+4*regC*nabla_E[6]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[7] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_26[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_26[0,:,:]) + P1*(np.multiply(delf912_26[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_26[1,:,:]), axis = 0))+4*regC*nabla_E[7]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[8] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_17[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_17[0,:,:]) + P1*(np.multiply(delf912_17[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_17[1,:,:]), axis = 0))+4*regC*nabla_E[8]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[9] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_27[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_27[0,:,:]) + P1*(np.multiply(delf912_27[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_27[1,:,:]), axis = 0))+4*regC*nabla_E[9]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[10] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_18[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_18[0,:,:]) + P1*(np.multiply(delf912_18[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_18[1,:,:]), axis = 0))+4*regC*nabla_E[10]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[11] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_28[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_28[0,:,:]) + P1*(np.multiply(delf912_28[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_28[1,:,:]), axis = 0))+4*regC*nabla_E[11]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[12] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_39[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_39[0,:,:]) + P1*(np.multiply(delf912_39[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_39[1,:,:]), axis = 0))+4*regC*nabla_E[12]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[13] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_49[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_49[0,:,:]) + P1*(np.multiply(delf912_49[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_49[1,:,:]), axis = 0))+4*regC*nabla_E[13]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[14] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_59[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_59[0,:,:]) + P1*(np.multiply(delf912_59[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_59[1,:,:]), axis = 0))+4*regC*nabla_E[14]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[15] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_69[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_69[0,:,:]) + P1*(np.multiply(delf912_69[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_69[1,:,:]), axis = 0))+4*regC*nabla_E[15]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[16] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_79[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_79[0,:,:]) + P1*(np.multiply(delf912_79[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_79[1,:,:]), axis = 0))+4*regC*nabla_E[16]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[17] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_89[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_89[0,:,:]) + P1*(np.multiply(delf912_89[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_89[1,:,:]), axis = 0))+4*regC*nabla_E[17]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)


	return nabla_E
				
			



def SGD(self, training_data, epochs, mini_batch_size, eta,
			test_data=None):
	"""Train the neural network using mini-batch stochastic
	gradient descent.  The ``training_data`` is a list of tuples
	``(x, y)`` representing the training inputs and the desired
	outputs.  The other non-optional parameters are
	self-explanatory.  If ``test_data`` is provided then the
	network will be evaluated against the test data after each
	epoch, and partial progress printed out.  This is useful for
	tracking progress, but slows things down substantially."""
	if test_data: n_test = len(test_data)
	n = len(training_data)
	for j in xrange(epochs):
		random.shuffle(training_data)
		mini_batches = [
			training_data[k:k+mini_batch_size]
			for k in xrange(0, n, mini_batch_size)]
		for mini_batch in mini_batches:
			[W, allbias] = self.update_mini_batch(mini_batch, eta)
		if test_data:
			print "Epoch {0}: {1} / {2}".format(
				j, self.evaluate(test_data), n_test)
		else:
			print "Epoch {0} complete".format(j)
	return [W, allbias]



def update_mini_batch(self, mini_batch, eta):

	"""Update the network's weights and biases by applying
	gradient descent using backpropagation to a single mini batch.
	The ``mini_batch`` is a list of tuples ``(x, y)``, and ``eta``
	is the learning rate."""
	nabla_b = [np.zeros(b.shape) for b in self.biases]
	nabla_w = [np.zeros(w.shape) for w in self.weights]
	for x, y in mini_batch:
		delta_nabla_b, delta_nabla_w = self.backprop(x, y)
		nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
		nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]
	self.weights = [w-(eta/len(mini_batch))*nw 
					for w, nw in zip(self.weights, nabla_w)]
	self.biases = [b-(eta/len(mini_batch))*nb 
					for b, nb in zip(self.biases, nabla_b)]

	return [self.weights, self.biases]



def create_name(learning_rate, reg_level, gdstep):
	
	str_r = 'InfoMax261AllInput' + str(learning_rate) +'_reg_levelC' + str(reg_level) + '_GDsteps'+ repr(gdstep) 

	return str_r


"""end of function specification"""





# Here are some parameters for learning and target function specification

#learning_eta = float(sys.argv[1])  # argument i in the batch file
#regularization = float(sys.argv[2]) # argument j in the batch file
#learning_eta = 0.025 
regularization = 0.5
learning_eta = 0.02
NGD= 50 # Gradient descent steps






# File I/O
dir_name='./'
case_num = 2 # for data manipulation 1 for uniform mu 


# First specify the initial binding affinities
Nproteins = 9
wrong_binding = 2.0  # This can be incorporated into learning

Pinput1 = (np.array([[0.9],[0.1]]), np.array([[0.65],[0.35]]), np.array([[0.5],[0.5]]), np.array([[0.2],[0.8]]))
Pinput2 = (np.array([[0.9],[0.1]]), np.array([[0.65],[0.35]]), np.array([[0.5],[0.5]]), np.array([[0.2],[0.8]]))


#Ebind = 1.0*np.array([-7.0,-7.0,-4.0,-5.0 ,-3.7,-5.62,-3.9,-3.3, -2.8, -2.8, -2.8, -2.8, -1.8, -1.8, -1.8, -1.8, -1.2, -1.2])
Ebind = -5.0 + np.zeros((1,18), dtype = float)
Ebindall = np.zeros((NGD+1, 18, len(Pinput1)), dtype = float)
MI = np.zeros((NGD, len(Pinput1)), dtype = float)




# here for chemical potential mu_i = - log omega_i
# for uniform case, set omega3= Nproteins

omegavec = np.zeros(Nproteins) + Nproteins  # homogenous
mu = - np.log(omegavec) # chemical potential


marginal9 = np.zeros([2,1]) # output





# Start main loop



for inputProb in xrange(len(Pinput1)):

	Ebindall[0,:, inputProb] = Ebind


	for ind in xrange(NGD):

		G = Graph()
		x1 = G.addVarNode('x1',2)
		x2 = G.addVarNode('x2',2)
		x3 = G.addVarNode('x3',2)
		x4 = G.addVarNode('x4',2)
		x5 = G.addVarNode('x5',2)
		x6 = G.addVarNode('x6',2)
		x7 = G.addVarNode('x7',2)
		x8 = G.addVarNode('x8',2)
		x9 = G.addVarNode('x9',2)
	
	

		# Pa3, Pa4, Pa5, Pa6 encodes (x1,x2)=(0,0), (0,1), (1,0), (1,1)

		Pa3 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
		Pa4 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
		Pa5 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)|
		Pa6 = np.array(list(itertools.product([[0],[1]], repeat = 2)))
		Pa7 = np.array(list(itertools.product([[0],[1]], repeat = 2)))
		Pa8 = np.array(list(itertools.product([[0],[1]], repeat = 2)))
			
		#Pa9 encodes (x3,x4,x5,x6, x7, x8), shape=(64,6,1)
		Pa9 = np.array(list(itertools.product([[0],[1]], repeat = 6)))
		
		#P1 = np.array([[0.8],[0.2]])  # p(x1)=[p(x1=0), p(x1=1)]
		P1 = Pinput1[inputProb] # assuming flat prior
		G.addFacNode(P1, x1)

		#P2 = np.array([[0.7],[0.3]])  # p(x2)
		P2 = Pinput2[inputProb] # assuming flat prior
		G.addFacNode(P2, x2)

		E3 = Ebindall[ind, 0:2, inputProb] # i.e. E13 E23, ngb of x3
		E4 = Ebindall[ind, 2:4, inputProb] # i.e. E14 E24, ngb of x4
		E5 = Ebindall[ind, 4:6, inputProb] # i.e. E15 E25, ngb of x5
		E6 = Ebindall[ind, 6:8, inputProb] # i.e. E16 E26, ngb of x6
		E7 = Ebindall[ind, 8:10, inputProb] # i.e.E17 E27, ngb of x7
		E8 = Ebindall[ind, 10:12, inputProb] # i.e.E18 E28, ngb of x8
		E9 = Ebindall[ind, 12:18, inputProb] # i.e.E39 E49 E59 E69 E79 E89, ngb of x9


		
		
		
			
		# note the syntax: conditional_prob_on(PAstate, Ematrix, Wbind, omega):


		# below for factor node P123
		P123 = np.zeros((2,2,2)) # [ p(x3=0|x1 x2), p(x3=1|x1 x2)]
		P123[:,0,0]=[1-conditional_prob_on(Pa3[0], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[0], E3, wrong_binding, omegavec[0:2])]
		P123[:,0,1]=[1-conditional_prob_on(Pa3[1], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[1], E3, wrong_binding, omegavec[0:2])]
		P123[:,1,0]=[1-conditional_prob_on(Pa3[2], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[2], E3, wrong_binding, omegavec[0:2])]
		P123[:,1,1]=[1-conditional_prob_on(Pa3[3], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[3], E3, wrong_binding, omegavec[0:2])]



		G.addFacNode(P123,x3,x1,x2)

		# below for factor node P124
		P124 = np.zeros((2,2,2)) # p(x4|x1 x2)
		P124[:,0,0]=[1-conditional_prob_on(Pa4[0], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[0], E4, wrong_binding, omegavec[0:2])]
		P124[:,0,1]=[1-conditional_prob_on(Pa4[1], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[1], E4, wrong_binding, omegavec[0:2])]
		P124[:,1,0]=[1-conditional_prob_on(Pa4[2], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[2], E4, wrong_binding, omegavec[0:2])]
		P124[:,1,1]=[1-conditional_prob_on(Pa4[3], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[3], E4, wrong_binding, omegavec[0:2])]


		G.addFacNode(P124,x4,x1,x2)

		# below for factor node P125
		P125 = np.zeros((2,2,2)) # p(x5|x1 x2)
		P125[:,0,0]=[1-conditional_prob_on(Pa5[0], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[0], E5, wrong_binding, omegavec[0:2])]
		P125[:,0,1]=[1-conditional_prob_on(Pa5[1], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[1], E5, wrong_binding, omegavec[0:2])]
		P125[:,1,0]=[1-conditional_prob_on(Pa5[2], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[2], E5, wrong_binding, omegavec[0:2])]
		P125[:,1,1]=[1-conditional_prob_on(Pa5[3], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[3], E5, wrong_binding, omegavec[0:2])]


		G.addFacNode(P125,x5,x1,x2)


		# below for factor node P126
		P126 = np.zeros((2,2,2)) # p(x6|x1 x2)
		P126[:,0,0]=[1-conditional_prob_on(Pa6[0], E6, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa6[0], E6, wrong_binding, omegavec[0:2])]
		P126[:,0,1]=[1-conditional_prob_on(Pa6[1], E6, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa6[1], E6, wrong_binding, omegavec[0:2])]
		P126[:,1,0]=[1-conditional_prob_on(Pa6[2], E6, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa6[2], E6, wrong_binding, omegavec[0:2])]
		P126[:,1,1]=[1-conditional_prob_on(Pa6[3], E6, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa6[3], E6, wrong_binding, omegavec[0:2])]


		G.addFacNode(P126,x6,x1,x2)

		# below for factor node P127
		P127 = np.zeros((2,2,2)) # p(x7|x1 x2)
		P127[:,0,0]=[1-conditional_prob_on(Pa7[0], E7, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa7[0], E7, wrong_binding, omegavec[0:2])]
		P127[:,0,1]=[1-conditional_prob_on(Pa7[1], E7, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa7[1], E7, wrong_binding, omegavec[0:2])]
		P127[:,1,0]=[1-conditional_prob_on(Pa7[2], E7, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa7[2], E7, wrong_binding, omegavec[0:2])]
		P127[:,1,1]=[1-conditional_prob_on(Pa7[3], E7, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa7[3], E7, wrong_binding, omegavec[0:2])]


		G.addFacNode(P127,x7,x1,x2)


		# below for factor node P128
		P128 = np.zeros((2,2,2)) # p(x6|x1 x2)
		P128[:,0,0]=[1-conditional_prob_on(Pa8[0], E8, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa8[0], E8, wrong_binding, omegavec[0:2])]
		P128[:,0,1]=[1-conditional_prob_on(Pa8[1], E8, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa8[1], E8, wrong_binding, omegavec[0:2])]
		P128[:,1,0]=[1-conditional_prob_on(Pa8[2], E8, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa8[2], E8, wrong_binding, omegavec[0:2])]
		P128[:,1,1]=[1-conditional_prob_on(Pa8[3], E8, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa8[3], E8, wrong_binding, omegavec[0:2])]


		G.addFacNode(P128,x8,x1,x2)


		
		# below for factor node P3456789 
		Plastlayer = np.zeros((2,2,2,2,2,2,2)) # P(x9| x3 x4 x5 x6 x7 x8)
		for i in xrange(Pa9.shape[0]):
			i3 = Pa9[i][0][0]
			i4 = Pa9[i][1][0]
			i5 = Pa9[i][2][0]
			i6 = Pa9[i][3][0]
			i7 = Pa9[i][4][0]
			i8 = Pa9[i][5][0]
			Plastlayer[:,i3,i4,i5,i6,i7,i8] = [1-conditional_prob_on(Pa9[i], E9, wrong_binding, omegavec[2:8]), conditional_prob_on(Pa9[i], E9, wrong_binding, omegavec[2:8])]

		G.addFacNode(Plastlayer,x9,x3,x4,x5,x6,x7,x8)
		


		
	
		brute = G.bruteForce()
		distx9 = G.marginalizeBrute(brute, 'x9')
		marginal9[0]= float(distx9[0]) # x9 off
		marginal9[1]= float(distx9[1]) # x9 on

		


		

		tmp = np.array(list(itertools.product([[0],[1]], repeat = 9)))
		Pjointcond12 = np.zeros((2,2,2,2,2,2,2,2,2))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x3
			i4 = tmp[i][3][0] # index for x4
			i5 = tmp[i][4][0] # index for x5
			i6 = tmp[i][5][0] # index for x6
			i7 = tmp[i][6][0] # index for x7
			i8 = tmp[i][7][0] # index for x8
			i9 = tmp[i][8][0] # index for x9
			Pjointcond12[i9,i8,i7,i6,i5,i4,i3,i2,i1] = Plastlayer[i9,i3,i4,i5,i6,i7,i8]*P128[i8,i1,i2]*P127[i7,i1,i2]*P126[i6,i1,i2]*P125[i5,i1,i2]*P124[i4,i1,i2]*P123[i3,i1,i2]

		for i in xrange(6):
			tmp = np.sum(Pjointcond12, axis = 1)
			Pjointcond12 = tmp
		
		P912 = Pjointcond12 


		'''
		# Calculate P912 = P(x9| x1 x2)
		# first trace out x3
		P9traceout3 = np.zeros((2,2,2,2,2,2,2,2)) # P(x9| x1 x2 x4 x5 x6 x7 x8)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 7)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i4 = tmp[i][2][0] # index for x4
			i5 = tmp[i][3][0] # index for x5
			i6 = tmp[i][4][0] # index for x6
			i7 = tmp[i][5][0] # index for x7
			i8 = tmp[i][6][0] # index for x8
			# Note Plastlayer = P(9| 3 4 5 6 7 8)
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			P9traceout3[0,i1,i2,i4,i5,i6,i7,i8]  = Plastlayer[0,0,i4, i5, i6, i7, i8]*P123[0,i1, i2] + Plastlayer[0,1,i4, i5, i6, i7, i8]*P123[1,i1, i2]
			P9traceout3[1,i1,i2,i4,i5,i6,i7,i8]  = Plastlayer[1,0,i4, i5, i6, i7, i8]*P123[0,i1, i2] + Plastlayer[1,1,i4, i5, i6, i7, i8]*P123[1,i1, i2]  

	

		# then trace out x4
		P9traceout34 = np.zeros((2,2,2,2,2,2,2)) # P(x9| x1 x2 x5 x6 x7 x8)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 6)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i5 = tmp[i][2][0] # index for x5
			i6 = tmp[i][3][0] # index for x6
			i7 = tmp[i][4][0] # index for x7
			i8 = tmp[i][5][0] # index for x8
			# P9traceout3 = P(9| 1 2 4 5 6 7 8)
			# P9traceout34= P(9| 1 2 5 6 7 8)
			P9traceout34[0,i1,i2,i5,i6,i7,i8]  = P9traceout3[0,i1,i2,0 ,i5,i6,i7,i8]*P124[0,i1, i2] + P9traceout3[0,i1,i2,1 ,i5,i6,i7,i8]*P124[1,i1, i2]
			P9traceout34[1,i1,i2,i5,i6,i7,i8]  = P9traceout3[1,i1,i2,0 ,i5,i6,i7,i8]*P124[0,i1, i2] + P9traceout3[1,i1,i2,1 ,i5,i6,i7,i8]*P124[1,i1, i2] 

		
		# then trace out x5
		P9traceout345 = np.zeros((2,2,2,2,2,2)) # P(x9| x1 x2 x6 x7 x8)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 5)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i6 = tmp[i][2][0] # index for x6
			i7 = tmp[i][3][0] # index for x7
			i8 = tmp[i][4][0] # index for x8
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			# P9traceout34= P(9| 1 2 5 6 7 8)
			P9traceout345[0,i1,i2,i6,i7,i8]  = P9traceout34[0,i1,i2,0,i6,i7,i8]*P125[0,i1, i2] + P9traceout34[0,i1,i2,1,i6,i7,i8]*P125[1,i1, i2]
			P9traceout345[1,i1,i2,i6,i7,i8]  = P9traceout34[1,i1,i2,0,i6,i7,i8]*P125[0,i1, i2] + P9traceout34[1,i1,i2,1,i6,i7,i8]*P125[1,i1, i2] 

		
		# then trace out x6
		P9traceout3456 = np.zeros((2,2,2,2,2)) # P(x9| x1 x2 x7 x8)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 4)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i7 = tmp[i][2][0] # index for x7
			i8 = tmp[i][3][0] # index for x8
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			# P9traceout34= P(9| 1 2 5 6 7 8)
			P9traceout3456[0,i1,i2,i7,i8]  = P9traceout345[0,i1,i2,0,i7,i8] *P126[0,i1, i2] + P9traceout345[0,i1,i2,1,i7,i8] *P126[1,i1, i2]
			P9traceout3456[1,i1,i2,i7,i8]  = P9traceout345[1,i1,i2,0,i7,i8] *P126[0,i1, i2] + P9traceout345[1,i1,i2,1,i7,i8] *P126[1,i1, i2]
		
		
		# then trace out x7
		P9traceout34567 = np.zeros((2,2,2,2)) # P(x9| x1 x2 x8)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i8 = tmp[i][2][0] # index for x8
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			# P9traceout34= P(9| 1 2 5 6 7 8)
			P9traceout34567[0,i1,i2,i8]  = P9traceout3456[0,i1,i2,0,i8] *P127[0,i1, i2] + P9traceout3456[0,i1,i2,1,i8] *P127[1,i1, i2]
			P9traceout34567[1,i1,i2,i8]  = P9traceout3456[1,i1,i2,0,i8] *P127[0,i1, i2] + P9traceout3456[1,i1,i2,1,i8] *P127[1,i1, i2]

		# then trace out x8
		P912 = np.zeros((2,2,2)) # P(x9| x1 x2)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			# P9traceout34= P(9| 1 2 5 6 7 8)
			P912[0,i1,i2]  = P9traceout34567[0,i1,i2,0] *P128[0,i1, i2] + P9traceout34567[0,i1,i2,1] *P128[1,i1, i2]
			P912[1,i1,i2]  = P9traceout34567[1,i1,i2,0] *P128[0,i1, i2] + P9traceout34567[1,i1,i2,1] *P128[1,i1, i2]
		
	
		
		
		P912joint2 = np.zeros((2,2,2))
		P12 = np.outer(P1,P2)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0]
			i2 = tmp[i][1][0]
			#P912joint[0,i1,i2] = P912[0,i1,i2]*P12[i1,i2]
			#P912joint[1,i1,i2] = P912[1,i1,i2]*P12[i1,i2]
			P912joint2[0,i1,i2] = Pjointcond12[0,i1,i2]*P12[i1,i2]
			P912joint2[1,i1,i2] = Pjointcond12[1,i1,i2]*P12[i1,i2]

		#P9 = np.sum(np.sum(P912joint, axis = 1), axis = 1)
		#marginal9 = np.array(P9)

		
	
		P9 = np.sum(np.sum(P912joint2, axis = 1), axis = 1)
		marginal9 = np.array(P9)

		print 'P9='
		print P9
		'''
	



		#print marginal9

		P912 = P912 + 10**-8 # avoid numerical divergence

	


		

		#MI[ind, inputProb] =  np.dot( np.transpose(P2), np.sum(P1*(np.multiply(P912[0,:,:], np.log2(P912[0,:,:]/marginal9[0]))
		# + np.multiply(P912[1,:,:], np.log2(P912[1,:,:]/marginal9[1]))), axis = 0))

		MI[ind, inputProb] =  np.dot(np.transpose(P2), np.sum(P1*(np.multiply(P912[0,:,:], np.log2(P912[0,:,:])) - P912[0,:,:]*np.log2(marginal9[0])) +
		P1*(np.multiply(P912[1,:,:], np.log2(P912[1,:,:])) - P912[1,:,:]*np.log2(marginal9[1])), axis = 0))



		
		#MI[ind, inputProb] =  np.dot(np.transpose(P1),(np.multiply(P912diag[0,:], np.log2(P912diag[0,:]/marginal9[0])) 
		#	+ np.multiply(P712diag[1,:], np.log2(P912diag[1,:]/marginal9[1]))))




		
		#MI[ind, inputProb] = np.dot( np.transpose(P2), np.sum(P1*np.multiply(P124[0,:,:], np.log(P124[0,:,:]/marginal4[0])) + P1*np.multiply(P124[1,:,:], np.log(P124[1,:,:]/marginal4[1])), axis = 0))
		Ebindall[ind+1,:, inputProb] = Ebindall[ind, :, inputProb] - learning_eta*InfoMaxGD(P1, P2, P912, marginal9, P123, P124, P125, P126, P127, P128, Plastlayer, Ebindall[ind, :, inputProb], wrong_binding, omegavec, regularization)
		G.reset()		




#print Ebindall[NGD,: ,len(Pinput1)-1]

#print Ebindall[NGD,: len(Pinput1)-1]

MImax = np.amax(MI, axis=0)	
print MImax
print Ebindall[NGD,:,1]
p = np.array([ [[3., 1.], [1.2, 0.4], [0.1, 0.9], [0.1, 0.9]], [[11., 9.], [8.8, 9.4], [6.4, 0.1], [8.8, 9.4]], [[3., 2.], [2., 2.], [2., 2.], [3., 2.]], [[0.3, 0.7], [0.44, 0.56], [0.37, 0.63], [0.44, 0.56]], [[0.2, 0.1], [0.64, 0.44], [0.37, 0.63], [0.2, 0.1]] ])
print p.shape


file_name = create_name(learning_eta, regularization, NGD) 
name = os.path.join(dir_name, file_name)
pickle.dump( {'BindingEnergy':Ebindall, 'MIall': MI, 'MImax': MImax}, open(name, 'wb'))



runtick = np.linspace(1,NGD, num=NGD)
plt.plot(runtick, MI[:,0], runtick, MI[:,1], runtick, MI[:,2], runtick, MI[:,3],linewidth=3.0)
plt.xlabel('Gradient ascent runs', fontsize = fl+4)
plt.ylabel('Mutual Information $MI(x_{in};\, x_9)$', fontsize = fl+4)
plt.xticks(fontsize = ft+4)
plt.yticks(fontsize = ft+4)
plt.legend([r'$P(x_{{in}}=1)=0.1$', r'$P(x_{{in}}=1)=0.35$', r'$P(x_{{in}}=1)=0.5$', r'$P(x_{{in}}=1)=0.8$'], shadow=True, fancybox=True, loc=(0.5, 0.3), fontsize=14+2)
plt.show()


#plt.show(block = True)
'''
full_str = 'InfoMax241LearningCurve'
fig_name = os.path.join(dir_name, full_str )
fig.savefig(fig_name+'.eps', bbox_inches='tight')
#fig.savefig(fig_name+'.eps')
#fig.savefig(fig_name+'.png')
#fig.savefig(fig_name+'.pdf', bbox_inches='tight')
fig.savefig(fig_name+'.pdf')
#fig.savefig(fig_name+'.eps')


'''

