from graph import Graph
from scipy import stats
import numpy as np
import itertools
import math
import sys
import os as os
import cPickle as pickle
from matplotlib import pyplot as plt
import seaborn




dir_current = os.getcwd()
dir_name = dir_current + '/figure'

# set up figure
fig = plt.figure()
#ax = fig.add_subplot(111)
ft = 15 # tick font size
fl = 16 # label font size
fs_s = 12 # small text font size
ms = 5 # marker size
lw = 3 # line width size



"""
This code shows how to use BP (sum-product alg)+ gradient ascent opt. to 
get the marginals of each kinases. 

New IC:  Ebind[0,:] = np.array([-5,-3,-3,-3]) 
original IC : Ebind[0,:] = np.array([-1,-2,-1,-1.5])

New omega" omega3 = 2, omegarest = 8 (i.e. freq3 =0.5, freqrest =0.125)
original omega: all omega = 4


"""




def conditional_prob_on(PAstate, Ematrix, Wbind, omega):
	
	"""
	The conditional prob is dependent on the biophysical model

	"""
	if isinstance(omega, float):
		omega = np.array([omega])

	omegainv= omega**-1
	num = 0.0
	den = 0.0
	


	for j in range(0,len(Ematrix)):
		num = num + omegainv[j]*np.exp(-Ematrix[j])*PAstate[j]
		den = den + omegainv[j]*(np.exp(-Ematrix[j])*PAstate[j] + np.exp(-Wbind)*(1-PAstate[j]))
	
	return num / (1 + den)



"""
get_mn_log_likelihood() function is not used in this program

"""
def get_mn_log_likelihood(obs,probs):
	""" Return the (log)likelihood of obs, given the probs"""
	# Multinomial Distribution Log PMF
	# ln (pdf)      =             multinomial coeff            *   product of probabilities
	# ln[f(x|n, p)] = [ln(n!) - (ln(x1!)+ln(x2!)+...+ln(xk!))] + [x1*ln(p1)+x2*ln(p2)+...+xk*ln(pk)]     

	multinomial_coeff_denom= 0
	prod_probs = 0
	for x in range(0,len(obs)): # loop through state counts in each observation
		multinomial_coeff_denom = multinomial_coeff_denom + math.log(math.factorial(obs[x]))
		prod_probs = prod_probs + obs[x]*math.log(probs[x])
	 
	multinomial_coeff = math.log(math.factorial(sum(obs))) -  multinomial_coeff_denom
	likelihood = multinomial_coeff + prod_probs
	return likelihood


def sample_generate(margDist, Nsamples):
	""" margDist is a 2-tuple of len(margDist)
		This functions returns a sample of data generated by the marg prob specified
	"""
	xk = np.arange(2)
	margsamples = np.zeros([len(margDist), Nsamples]) 
	for tupleindex in xrange(len(margDist)):
		custm = stats.rv_discrete(name='custm', values=(xk, margDist[tupleindex]))
		margsamples[tupleindex, :]= custm.rvs(size= Nsamples)

	return margsamples


def InfoMaxGD(P1, P2, P129, P9, P123, P124, P125, P3456, P3457, P3458 ,P9traceout6, P9traceout67, P9traceout678, P9traceout6785, P9traceout67854, bindingE, bindingW, oall, regC):

	nabla_E = np.zeros(len(bindingE))
	underflowcutoff = 0.001


	freqall= oall**-1
	delP3_12_1 = np.zeros((2,2,2), dtype = float)
	delP3_12_2 = np.zeros((2,2,2), dtype = float)
	delP4_12_1 = np.zeros((2,2,2), dtype = float)
	delP4_12_2 = np.zeros((2,2,2), dtype = float)
	delP5_12_1 = np.zeros((2,2,2), dtype = float)
	delP5_12_2 = np.zeros((2,2,2), dtype = float)
	delP6_345_3 = np.zeros((2,2,2,2), dtype = float)
	delP6_345_4 = np.zeros((2,2,2,2), dtype = float)
	delP6_345_5 = np.zeros((2,2,2,2), dtype = float)
	delP7_345_3 = np.zeros((2,2,2,2), dtype = float)
	delP7_345_4 = np.zeros((2,2,2,2), dtype = float)
	delP7_345_5 = np.zeros((2,2,2,2), dtype = float)
	delP8_345_3 = np.zeros((2,2,2,2), dtype = float)
	delP8_345_4 = np.zeros((2,2,2,2), dtype = float)
	delP8_345_5 = np.zeros((2,2,2,2), dtype = float)
	delP9_678_6 = np.zeros((2,2,2,2), dtype = float)
	delP9_678_7 = np.zeros((2,2,2,2), dtype = float)
	delP9_678_8 = np.zeros((2,2,2,2), dtype = float)


	delf912_13 = np.zeros((2,2,2), dtype = float)
	delf912_23 = np.zeros((2,2,2), dtype = float)
	delf912_14 = np.zeros((2,2,2), dtype = float)
	delf912_24 = np.zeros((2,2,2), dtype = float)
	delf912_15 = np.zeros((2,2,2), dtype = float)
	delf912_25 = np.zeros((2,2,2), dtype = float)
	delf912_36 = np.zeros((2,2,2), dtype = float)
	delf912_46 = np.zeros((2,2,2), dtype = float)
	delf912_56 = np.zeros((2,2,2), dtype = float)
	delf912_37 = np.zeros((2,2,2), dtype = float)
	delf912_47 = np.zeros((2,2,2), dtype = float)
	delf912_57 = np.zeros((2,2,2), dtype = float)
	delf912_38 = np.zeros((2,2,2), dtype = float)
	delf912_48 = np.zeros((2,2,2), dtype = float)
	delf912_58 = np.zeros((2,2,2), dtype = float)
	delf912_69 = np.zeros((2,2,2), dtype = float)
	delf912_79 = np.zeros((2,2,2), dtype = float)
	delf912_89 = np.zeros((2,2,2), dtype = float)



	for tstep in xrange(1):




		# bindingE[i]: i = 0, 1 (E31, E32, ngb of 3)
		#			       2, 3 (E41, E42, ngb of 4)
		#				   4, 5 (E51, E52, ngb of 5)
		#				   6, 7, 8 (E63, E64, E65, ngb of 6)
		#				   9, 10, 11 (E73, E74, E75, nbg of 7)
		#                 12, 13, 14 (E83, E84, E85, nbg of 8)
		#                 15, 16, 17 (E96, E97, E98, nbg of 9)
		

		# First evaluate the first layer derivative
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))
		for i in [3,4,5]:

			for j in xrange(tmp.shape[0]):
				i1 = tmp[j][0][0] # index for x1
				i2 = tmp[j][1][0] # index for x2

				if i == 3:
					estart = 0
					delP3_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP3_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

				elif i == 4:
					estart = 2

					delP4_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP4_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

				elif i == 5:
					estart = 4

					delP5_12_1[1,i1, i2]=  (-freqall[i1]*np.exp(-bindingE[estart])*float(i1)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)

					delP5_12_2[1,i1, i2]=  (-freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)*(1
					+(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2))*np.exp(-bindingW)))/((1
					+freqall[i1]*np.exp(-bindingE[estart])*float(i1)
					+freqall[i2]*np.exp(-bindingE[estart+1])*float(i2)
					+np.exp(-bindingW)*(freqall[i1]+freqall[i2]-freqall[i1]*float(i1)-freqall[i2]*float(i2)))**2)


		
		# now evaluate the second layer and the third layer
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		for i in [6,7,8, 9]:

			for j in xrange(tmp.shape[0]):
				i3 = tmp[j][0][0] # index for x3
				i4 = tmp[j][1][0] # index for x4
				i5 = tmp[j][2][0] # index for x5

				if i == 6:
					estart = 6
					delP6_345_3[1,i3, i4, i5]=  (-freqall[i3]*np.exp(-bindingE[estart])*float(i3)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

					delP6_345_4[1,i3, i4, i5]=  (-freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

					delP6_345_5[1,i3, i4, i5]=  (-freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

				elif i == 7:
					estart = 9
					delP7_345_3[1,i3, i4, i5]=  (-freqall[i3]*np.exp(-bindingE[estart])*float(i3)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

					delP7_345_4[1,i3, i4, i5]=  (-freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

					delP7_345_5[1,i3, i4, i5]=  (-freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

				elif i == 8:
					estart = 12
					delP8_345_3[1,i3, i4, i5]=  (-freqall[i3]*np.exp(-bindingE[estart])*float(i3)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

					delP8_345_4[1,i3, i4, i5]=  (-freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

					delP8_345_5[1,i3, i4, i5]=  (-freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)*(1
					+(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5))*np.exp(-bindingW)))/((1
					+freqall[i3]*np.exp(-bindingE[estart])*float(i3)
					+freqall[i4]*np.exp(-bindingE[estart+1])*float(i4)
					+freqall[i5]*np.exp(-bindingE[estart+2])*float(i5)
					+np.exp(-bindingW)*(freqall[i3]+freqall[i4]+freqall[i5]-freqall[i3]*float(i3)-freqall[i4]*float(i4)-freqall[i5]*float(i5)))**2)

				elif i == 9:
					estart = 15
					i6 = i3
					i7 = i4
					i8 = i5
					delP9_678_6[1,i6, i7, i8]=  (-freqall[i6]*np.exp(-bindingE[estart])*float(i6)*(1
					+(freqall[i6]+freqall[i7]+freqall[i8]-freqall[i6]*float(i6)-freqall[i7]*float(i7)-freqall[i8]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[i6]*np.exp(-bindingE[estart])*float(i6)
					+freqall[i7]*np.exp(-bindingE[estart+1])*float(i7)
					+freqall[i8]*np.exp(-bindingE[estart+2])*float(i8)
					+np.exp(-bindingW)*(freqall[i6]+freqall[i7]+freqall[i8]-freqall[i6]*float(i7)-freqall[i7]*float(i7)-freqall[i8]*float(i8)))**2)

					delP9_678_7[1,i6, i7, i8]=  (-freqall[i7]*np.exp(-bindingE[estart+1])*float(i7)*(1
					+(freqall[i6]+freqall[i7]+freqall[i8]-freqall[i6]*float(i6)-freqall[i7]*float(i7)-freqall[i8]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[i6]*np.exp(-bindingE[estart])*float(i6)
					+freqall[i7]*np.exp(-bindingE[estart+1])*float(i7)
					+freqall[i8]*np.exp(-bindingE[estart+2])*float(i8)
					+np.exp(-bindingW)*(freqall[i6]+freqall[i7]+freqall[i8]-freqall[i6]*float(i7)-freqall[i7]*float(i7)-freqall[i8]*float(i8)))**2)

					delP9_678_8[1,i6, i7, i8]=  (-freqall[i8]*np.exp(-bindingE[estart+2])*float(i8)*(1
					+(freqall[i6]+freqall[i7]+freqall[i8]-freqall[i6]*float(i6)-freqall[i7]*float(i7)-freqall[i8]*float(i8))*np.exp(-bindingW)))/((1
					+freqall[i6]*np.exp(-bindingE[estart])*float(i6)
					+freqall[i7]*np.exp(-bindingE[estart+1])*float(i7)
					+freqall[i8]*np.exp(-bindingE[estart+2])*float(i8)
					+np.exp(-bindingW)*(freqall[i6]+freqall[i7]+freqall[i8]-freqall[i6]*float(i7)-freqall[i7]*float(i7)-freqall[i8]*float(i8)))**2)


		delP3_12_1[0,:,:] = 1-delP3_12_1[1,:,:]
		delP3_12_2[0,:,:] = 1-delP3_12_2[1,:,:]
		delP4_12_1[0,:,:] = 1-delP4_12_1[1,:,:]
		delP4_12_2[0,:,:] = 1-delP4_12_2[1,:,:]
		delP5_12_1[0,:,:] = 1-delP5_12_1[1,:,:]
		delP5_12_2[0,:,:] = 1-delP5_12_2[1,:,:]
		delP6_345_3[0,:,:, :] = 1-delP6_345_3[0,:,:, :]
		delP6_345_4[0,:,:, :] = 1-delP6_345_4[0,:,:, :]
		delP6_345_5[0,:,:, :] = 1-delP6_345_5[0,:,:, :]
		delP7_345_3[0,:,:, :] = 1-delP7_345_3[0,:,:, :]
		delP7_345_4[0,:,:, :] = 1-delP7_345_4[0,:,:, :]
		delP7_345_5[0,:,:, :] = 1-delP7_345_5[0,:,:, :]
		delP8_345_3[0,:,:, :] = 1-delP8_345_3[0,:,:, :]
		delP8_345_4[0,:,:, :] = 1-delP8_345_4[0,:,:, :]
		delP8_345_5[0,:,:, :] = 1-delP8_345_5[0,:,:, :]
		delP9_678_6[0,:,:, :] = 1-delP9_678_6[0,:,:, :]
		delP9_678_7[0,:,:, :] = 1-delP9_678_7[0,:,:, :]
		delP9_678_8[0,:,:, :] = 1-delP9_678_8[0,:,:, :]

		
			
		
		###
		### below start merging these functions to get the gradient
		###

		# first merge all to get the derivatives of the last layer



		f69traceout6 = np.zeros((2,2,2,2,2,2,2,2), dtype = float)
		f79traceout6 = np.zeros((2,2,2,2,2,2,2,2), dtype = float)
		f89traceout6 = np.zeros((2,2,2,2,2,2,2,2), dtype = float)
		f36traceout6 = np.zeros((2,2,2,2,2,2,2,2), dtype = float)
		f46traceout6 = np.zeros((2,2,2,2,2,2,2,2), dtype = float)
		f56traceout6 = np.zeros((2,2,2,2,2,2,2,2), dtype = float)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 7)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x3
			i4 = tmp[i][3][0] # index for x4
			i5 = tmp[i][4][0] # index for x5
			i7 = tmp[i][5][0] # index for x7
			i8 = tmp[i][6][0] # index for x8


			f69traceout6[:,i1,i2,i3,i4,i5,i7,i8] = delP9_678_6[:,0,i7,i8]*P3456[0,i3,i4,i5] + delP9_678_6[:,1,i7,i8]*P3456[1,i3,i4,i5]
			f79traceout6[:,i1,i2,i3,i4,i5,i7,i8] = delP9_678_7[:,0,i7,i8]*P3456[0,i3,i4,i5] + delP9_678_7[:,1,i7,i8]*P3456[1,i3,i4,i5]
			f89traceout6[:,i1,i2,i3,i4,i5,i7,i8] = delP9_678_7[:,0,i7,i8]*P3456[0,i3,i4,i5] + delP9_678_8[:,1,i7,i8]*P3456[1,i3,i4,i5]

			# second layer derivatives
			f36traceout6[:,i1,i2,i3,i4,i5,i7,i8] = delP6_345_3[0,i3,i4,i5]*P6789[:,0,i7,i8] + delP6_345_3[1,i3,i4,i5]*P6789[:,1,i7,i8]
			f46traceout6[:,i1,i2,i3,i4,i5,i7,i8] = delP6_345_4[0,i3,i4,i5]*P6789[:,0,i7,i8] + delP6_345_4[1,i3,i4,i5]*P6789[:,1,i7,i8]
			f56traceout6[:,i1,i2,i3,i4,i5,i7,i8] = delP6_345_5[0,i3,i4,i5]*P6789[:,0,i7,i8] + delP6_345_5[1,i3,i4,i5]*P6789[:,1,i7,i8]







		tmp = np.array(list(itertools.product([[0],[1]], repeat = 6)))
		f69traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f79traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f89traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f36traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f46traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f56traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f37traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f47traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		f57traceout67 = np.zeros((2,2,2,2,2,2,2), dtype = float)
		
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x3
			i4 = tmp[i][3][0] # index for x4
			i5 = tmp[i][4][0] # index for x5
			i8 = tmp[i][5][0] # index for x8

			f69traceout67[:,i1,i2,i3,i4,i5,i8] = f69traceout6[:,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5]+ f69traceout6[:,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]
			f79traceout67[:,i1,i2,i3,i4,i5,i8] = f79traceout6[:,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5]+ f79traceout6[:,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]
			f89traceout67[:,i1,i2,i3,i4,i5,i8] = f89traceout6[:,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5]+ f89traceout6[:,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]

			# below second layer derivative
			f36traceout67[:,i1,i2,i3,i4,i5,i8] = f36traceout6[:,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5]+ f36traceout6[:,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]
			f46traceout67[:,i1,i2,i3,i4,i5,i8] = f46traceout6[:,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5]+ f46traceout6[:,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]
			f56traceout67[:,i1,i2,i3,i4,i5,i8] = f56traceout6[:,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5]+ f56traceout6[:,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]

			f37traceout67[:,i1,i2,i3,i4,i5,i8] = P9traceout6[:,i1,i2,i3,i4,i5,0,i8]*delP7_345_3[0,i3,i4,i5]+ P9traceout6[:,i1,i2,i3,i4,i5,1,i8]*delP7_345_3[1,i3,i4,i5]
			f47traceout67[:,i1,i2,i3,i4,i5,i8] = P9traceout6[:,i1,i2,i3,i4,i5,0,i8]*delP7_345_4[0,i3,i4,i5]+ P9traceout6[:,i1,i2,i3,i4,i5,1,i8]*delP7_345_4[1,i3,i4,i5]
			f57traceout67[:,i1,i2,i3,i4,i5,i8] = P9traceout6[:,i1,i2,i3,i4,i5,0,i8]*delP7_345_5[0,i3,i4,i5]+ P9traceout6[:,i1,i2,i3,i4,i5,1,i8]*delP7_345_5[1,i3,i4,i5]
			
			
			
		
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 5)))
		f69traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f79traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f89traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f36traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f46traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f56traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f37traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f47traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f57traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f38traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f48traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		f58traceout678 = np.zeros((2,2,2,2,2,2), dtype = float)
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x3
			i4 = tmp[i][3][0] # index for x4
			i5 = tmp[i][4][0] # index for x5
	

			f69traceout678[:,i1,i2,i3,i4,i5] = f69traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f69traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]
			f79traceout678[:,i1,i2,i3,i4,i5] = f79traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f79traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]
			f89traceout678[:,i1,i2,i3,i4,i5] = f89traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f89traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]

			# below evaluate second layer derivative
			f36traceout678[:,i1,i2,i3,i4,i5] = f36traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f36traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]
			f46traceout678[:,i1,i2,i3,i4,i5] = f46traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f46traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]
			f56traceout678[:,i1,i2,i3,i4,i5] = f56traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f56traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]

			f37traceout678[:,i1,i2,i3,i4,i5] = f37traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f37traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]
			f47traceout678[:,i1,i2,i3,i4,i5] = f47traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f47traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]
			f57traceout678[:,i1,i2,i3,i4,i5] = f57traceout67[:,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5]+ f57traceout67[:,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]

			f38traceout678[:,i1,i2,i3,i4,i5] = P9traceout67[:,i1,i2,i3,i4,i5,0]*delP8_345_3[0,i3,i4,i5]+ P9traceout67[:,i1,i2,i3,i4,i5,1]*delP8_345_3[1,i3,i4,i5]
			f48traceout678[:,i1,i2,i3,i4,i5] = P9traceout67[:,i1,i2,i3,i4,i5,0]*delP8_345_4[0,i3,i4,i5]+ P9traceout67[:,i1,i2,i3,i4,i5,1]*delP8_345_4[1,i3,i4,i5]
			f58traceout678[:,i1,i2,i3,i4,i5] = P9traceout67[:,i1,i2,i3,i4,i5,0]*delP8_345_5[0,i3,i4,i5]+ P9traceout67[:,i1,i2,i3,i4,i5,1]*delP8_345_5[1,i3,i4,i5]


		

		tmp = np.array(list(itertools.product([[0],[1]], repeat = 4)))
		f69traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f79traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f89traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f36traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f46traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f56traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f37traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f47traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f57traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f38traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f48traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f58traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f15traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		f25traceout6785 = np.zeros((2,2,2,2,2), dtype = float)
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x3
			i4 = tmp[i][3][0] # index for x4
	

			f69traceout6785[:,i1,i2,i3,i4] = f69traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f69traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f79traceout6785[:,i1,i2,i3,i4] = f79traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f79traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f89traceout6785[:,i1,i2,i3,i4] = f89traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f89traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]

			
			# below second layer derivative
			f36traceout6785[:,i1,i2,i3,i4] = f36traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f36traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f46traceout6785[:,i1,i2,i3,i4] = f46traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f46traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f56traceout6785[:,i1,i2,i3,i4] = f56traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f56traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]

			f37traceout6785[:,i1,i2,i3,i4] = f37traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f37traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f47traceout6785[:,i1,i2,i3,i4] = f47traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f47traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f57traceout6785[:,i1,i2,i3,i4] = f57traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f57traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]

			f38traceout6785[:,i1,i2,i3,i4] = f38traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f38traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f48traceout6785[:,i1,i2,i3,i4] = f48traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f48traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]
			f58traceout6785[:,i1,i2,i3,i4] = f58traceout678[:,i1,i2,i3,i4,0]*P125[0,i1,i2]+ f58traceout678[:,i1,i2,i3,i4,1]*P125[1,i1,i2]

			# below first layer derivative

			f15traceout6785[:,i1,i2,i3,i4] = P9traceout678[:,i1,i2,i3,i4,0]*delP5_12_1[0,i1,i2]+P9traceout678[:,i1,i2,i3,i4,1]*delP5_12_1[1,i1,i2]
			f25traceout6785[:,i1,i2,i3,i4] = P9traceout678[:,i1,i2,i3,i4,0]*delP5_12_2[0,i1,i2]+P9traceout678[:,i1,i2,i3,i4,1]*delP5_12_2[1,i1,i2]



		tmp = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		f69traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f79traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f89traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f36traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f46traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f56traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f37traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f47traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f57traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f38traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f48traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f58traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f15traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f25traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f14traceout67854 = np.zeros((2,2,2,2), dtype = float)
		f24traceout67854 = np.zeros((2,2,2,2), dtype = float)
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x3
	

			f69traceout67854[:,i1,i2,i3] = f69traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f69traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f79traceout67854[:,i1,i2,i3] = f79traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f79traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f89traceout67854[:,i1,i2,i3] = f89traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f89traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]

			# below second layer derivatives
			f36traceout67854[:,i1,i2,i3] = f36traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f36traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f46traceout67854[:,i1,i2,i3] = f46traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f46traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f56traceout67854[:,i1,i2,i3] = f56traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f56traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]

			f37traceout67854[:,i1,i2,i3] = f37traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f37traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f47traceout67854[:,i1,i2,i3] = f47traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f47traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f57traceout67854[:,i1,i2,i3] = f57traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f57traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]

			f38traceout67854[:,i1,i2,i3] = f38traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f38traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f48traceout67854[:,i1,i2,i3] = f48traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f48traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f58traceout67854[:,i1,i2,i3] = f58traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f58traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]

			# below first layer derivative
			f15traceout67854[:,i1,i2,i3] = f15traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f15traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]
			f25traceout67854[:,i1,i2,i3] = f25traceout6785[:,i1,i2,i3,0]*P124[0,i1,i2]+ f25traceout6785[:,i1,i2,i3,1]*P124[1,i1,i2]

			f14traceout67854[:,i1,i2,i3] = P9traceout6785[:,i1,i2,i3,0]*delP4_12_1[0,i1,i2]+ P9traceout6785[:,i1,i2,i3,1]*delP4_12_1[1,i1,i2]
			f24traceout67854[:,i1,i2,i3] = P9traceout6785[:,i1,i2,i3,0]*delP4_12_2[0,i1,i2]+ P9traceout6785[:,i1,i2,i3,1]*delP4_12_2[1,i1,i2]







		

		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))
	
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
		
	

			delf912_69[:,i1,i2] = f69traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f69traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_79[:,i1,i2] = f79traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f79traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_89[:,i1,i2] = f89traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f89traceout67854[:,i1,i2,1]*P123[1,i1,i2]

			# below second layer derivatives

			delf912_36[:,i1,i2] = f36traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f36traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_46[:,i1,i2] = f46traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f46traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_56[:,i1,i2] = f56traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f56traceout67854[:,i1,i2,1]*P123[1,i1,i2]

			delf912_37[:,i1,i2] = f37traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f37traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_47[:,i1,i2] = f47traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f47traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_57[:,i1,i2] = f57traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f57traceout67854[:,i1,i2,1]*P123[1,i1,i2]

			delf912_38[:,i1,i2] = f38traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f38traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_48[:,i1,i2] = f48traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f48traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_58[:,i1,i2] = f58traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f58traceout67854[:,i1,i2,1]*P123[1,i1,i2]

			# below first layer derivative
			delf912_15[:,i1,i2] = f15traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f15traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_25[:,i1,i2] = f25traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f25traceout67854[:,i1,i2,1]*P123[1,i1,i2]

			delf912_14[:,i1,i2] = f14traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f14traceout67854[:,i1,i2,1]*P123[1,i1,i2]
			delf912_24[:,i1,i2] = f24traceout67854[:,i1,i2,0]*P123[0,i1,i2]+ f24traceout67854[:,i1,i2,1]*P123[1,i1,i2]

			delf912_13[:,i1,i2] = P9traceout67854[:,i1,i2,0]*delP3_12_1[0,i1,i2]+ P9traceout67854[:,i1,i2,1]*delP3_12_1[1,i1,i2]
			delf912_23[:,i1,i2] = P9traceout67854[:,i1,i2,0]*delP3_12_2[0,i1,i2]+ P9traceout67854[:,i1,i2,1]*delP3_12_2[1,i1,i2]


	
			

		# bindingE[i]: i = 0, 1 (E31, E32, ngb of 3)
		#			       2, 3 (E41, E42, ngb of 4)
		#				   4, 5 (E51, E52, ngb of 5)
		#				   6, 7 (E61, E62, ngb of 6)
		#				   8, 9 (E73, E74, nbg of 7)
		#                 10, 11(E83, E84, nbg of 8)
		#                 12, 13, 14, 15, 16 17 (E93, E94, E95, E96, E97, E98, nbg of 9)

		nabla_E[0] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_13[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_13[0,:,:]) + P1*(np.multiply(delf912_13[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_13[1,:,:]), axis = 0))-4*regC*nabla_E[0]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[1] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_23[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_23[0,:,:]) + P1*(np.multiply(delf912_23[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_23[1,:,:]), axis = 0))-4*regC*nabla_E[1]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[2] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_14[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_14[0,:,:]) + P1*(np.multiply(delf912_14[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_14[1,:,:]), axis = 0))-4*regC*nabla_E[2]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[3] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_24[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_24[0,:,:]) + P1*(np.multiply(delf912_24[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_24[1,:,:]), axis = 0))-4*regC*nabla_E[3]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[4] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_15[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_15[0,:,:]) + P1*(np.multiply(delf912_15[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_15[1,:,:]), axis = 0))-4*regC*nabla_E[4]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[5] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_25[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_25[0,:,:]) + P1*(np.multiply(delf912_25[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_25[1,:,:]), axis = 0))-4*regC*nabla_E[5]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[6] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_36[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_36[0,:,:]) + P1*(np.multiply(delf912_36[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_36[1,:,:]), axis = 0))-4*regC*nabla_E[6]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[7] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_46[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_46[0,:,:]) + P1*(np.multiply(delf912_46[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_46[1,:,:]), axis = 0))-4*regC*nabla_E[7]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[8] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_56[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_56[0,:,:]) + P1*(np.multiply(delf912_56[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_56[1,:,:]), axis = 0))-4*regC*nabla_E[8]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[9] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_37[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_37[0,:,:]) + P1*(np.multiply(delf912_37[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_37[1,:,:]), axis = 0))-4*regC*nabla_E[9]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[10] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_47[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_47[0,:,:]) + P1*(np.multiply(delf912_47[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_47[1,:,:]), axis = 0))-4*regC*nabla_E[10]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[11] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_57[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_57[0,:,:]) + P1*(np.multiply(delf912_57[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_57[1,:,:]), axis = 0))-4*regC*nabla_E[11]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[12] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_38[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_38[0,:,:]) + P1*(np.multiply(delf912_38[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_38[1,:,:]), axis = 0))-4*regC*nabla_E[12]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[13] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_48[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_48[0,:,:]) + P1*(np.multiply(delf912_48[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_48[1,:,:]), axis = 0))-4*regC*nabla_E[13]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[14] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_58[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_58[0,:,:]) + P1*(np.multiply(delf912_58[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_58[1,:,:]), axis = 0))-4*regC*nabla_E[14]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[15] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_69[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_69[0,:,:]) + P1*(np.multiply(delf912_69[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_69[1,:,:]), axis = 0))-4*regC*nabla_E[15]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[16] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_79[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_79[0,:,:]) + P1*(np.multiply(delf912_79[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_79[1,:,:]), axis = 0))-4*regC*nabla_E[16]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[17] = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf912_89[0,:,:], np.log2(P129[0,:,:]/P9[0]))+delf912_89[0,:,:]) + P1*(np.multiply(delf912_89[1,:,:], np.log2(P129[1,:,:]/P9[1]))+delf912_89[1,:,:]), axis = 0))-4*regC*nabla_E[17]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)


	return nabla_E





def SGD(self, training_data, epochs, mini_batch_size, eta,
			test_data=None):
	"""Train the neural network using mini-batch stochastic
	gradient descent.  The ``training_data`` is a list of tuples
	``(x, y)`` representing the training inputs and the desired
	outputs.  The other non-optional parameters are
	self-explanatory.  If ``test_data`` is provided then the
	network will be evaluated against the test data after each
	epoch, and partial progress printed out.  This is useful for
	tracking progress, but slows things down substantially."""
	if test_data: n_test = len(test_data)
	n = len(training_data)
	for j in xrange(epochs):
		random.shuffle(training_data)
		mini_batches = [
			training_data[k:k+mini_batch_size]
			for k in xrange(0, n, mini_batch_size)]
		for mini_batch in mini_batches:
			[W, allbias] = self.update_mini_batch(mini_batch, eta)
		if test_data:
			print "Epoch {0}: {1} / {2}".format(
				j, self.evaluate(test_data), n_test)
		else:
			print "Epoch {0} complete".format(j)
	return [W, allbias]



def update_mini_batch(self, mini_batch, eta):

	"""Update the network's weights and biases by applying
	gradient descent using backpropagation to a single mini batch.
	The ``mini_batch`` is a list of tuples ``(x, y)``, and ``eta``
	is the learning rate."""
	nabla_b = [np.zeros(b.shape) for b in self.biases]
	nabla_w = [np.zeros(w.shape) for w in self.weights]
	for x, y in mini_batch:
		delta_nabla_b, delta_nabla_w = self.backprop(x, y)
		nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
		nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]
	self.weights = [w-(eta/len(mini_batch))*nw 
					for w, nw in zip(self.weights, nabla_w)]
	self.biases = [b-(eta/len(mini_batch))*nb 
					for b, nb in zip(self.biases, nabla_b)]

	return [self.weights, self.biases]



def create_name(learning_rate, reg_level, gdstep):
	
	str_r = 'InfoMax231AllInput' + str(learning_rate) +'_reg_levelC' + str(reg_level) + '_GDsteps'+ repr(gdstep) 

	return str_r


"""end of function specification"""





# Here are some parameters for learning and target function specification

#learning_eta = float(sys.argv[1])  # argument i in the batch file
#regularization = float(sys.argv[2]) # argument j in the batch file
#learning_eta = 0.025 
regularization = 0.5
learning_eta = 0.1
NGD= 100 # Gradient descent steps






# File I/O
dir_name='./'
case_num = 2 # for data manipulation 1 for uniform mu 


# First specify the initial binding affinities
Nproteins = 9
wrong_binding = 2.0  # This can be incorporated into learning

Pinput1 = (np.array([[0.9],[0.1]]), np.array([[0.6],[0.4]]), np.array([[0.5],[0.5]]), np.array([[0.2],[0.8]]))
Pinput2 = (np.array([[0.9],[0.1]]), np.array([[0.6],[0.4]]), np.array([[0.5],[0.5]]), np.array([[0.2],[0.8]]))

#Ebind = 2.0*np.array([-4.0,-4.0,-4.0,-5.0 ,-3.7,-5.62,-4.2, -4.2, -4.2, -4.2, -4.2, -4.2,-4.2, -4.2, -4.2,-3.9,-3.3, -2.8])
Ebind = 1.0*np.array([-7.0,-7.0,-4.0,-5.0 ,-3.7,-5.62,-4.2, -4.2, -4.2, -4.2, -4.2, -4.2,-4.2, -4.2, -4.2,-3.9,-1.3, -1.8])
Ebind = -3.0+ np.zeros((1,18))
Ebindall = np.zeros((NGD+1, 18, len(Pinput1)), dtype = float)
MI = np.zeros((NGD, len(Pinput1)), dtype = float)




# here for chemical potential mu_i = - log omega_i
# for uniform case, set omega3= Nproteins

omegavec = np.zeros(Nproteins) + Nproteins  # homogenous
mu = - np.log(omegavec) # chemical potential


marginal9 = np.zeros([2,1]) # output



# Start main loop



for inputProb in xrange(len(Pinput1)):

	Ebindall[0,:, inputProb] = Ebind


	for ind in xrange(NGD):

		G = Graph()
		x1 = G.addVarNode('x1',2)
		x2 = G.addVarNode('x2',2)
		x3 = G.addVarNode('x3',2)
		x4 = G.addVarNode('x4',2)
		x5 = G.addVarNode('x5',2)
		x6 = G.addVarNode('x6',2)
		x7 = G.addVarNode('x7',2)
		x8 = G.addVarNode('x8',2)
		x9 = G.addVarNode('x9',2)
	
	

		# Pa3, Pa4, Pa5 encodes (x1,x2)=(0,0), (0,1), (1,0), (1,1)

		Pa3 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
		Pa4 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
		Pa5 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
			
		# Pa6, Pa7, Pa8 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111, shape=8,3,1
		Pa6 = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		Pa7 = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		Pa8 = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		Pa9 = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		

		#P1 = np.array([[0.8],[0.2]])  # p(x1)=[p(x1=0), p(x1=1)]
		P1 = Pinput1[inputProb] # assuming flat prior
		G.addFacNode(P1, x1)

		#P2 = np.array([[0.7],[0.3]])  # p(x2)
		P2 = Pinput2[inputProb] # assuming flat prior
		G.addFacNode(P2, x2)



		E3 = Ebindall[ind, 0:2, inputProb] # i.e. E13 E23, ngb of x3
		E4 = Ebindall[ind, 2:4, inputProb] # i.e. E14 E24, ngb of x4
		E5 = Ebindall[ind, 4:6, inputProb] # i.e. E15 E25, ngb of x5
		E6 = Ebindall[ind, 6:9, inputProb] # i.e. E36 E46 E56, ngb of x6
		E7 = Ebindall[ind, 9:12, inputProb] # i.e. E37 E47 E57, ngb of x7
		E8 = Ebindall[ind, 12:15, inputProb] # i.e. E38 E48 E58, ngb of x8
		E9 = Ebindall[ind, 15:18, inputProb] # i.e. E69 E79 E89, ngb of x9

		
		
		
			
		# note the syntax: conditional_prob_on(PAstate, Ematrix, Wbind, omega):


		# below for factor node P123
		P123 = np.zeros((2,2,2)) # [ p(x3=0|x1 x2), p(x3=1|x1 x2)]
		P123[:,0,0]=[1-conditional_prob_on(Pa3[0], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[0], E3, wrong_binding, omegavec[0:2])]
		P123[:,0,1]=[1-conditional_prob_on(Pa3[1], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[1], E3, wrong_binding, omegavec[0:2])]
		P123[:,1,0]=[1-conditional_prob_on(Pa3[2], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[2], E3, wrong_binding, omegavec[0:2])]
		P123[:,1,1]=[1-conditional_prob_on(Pa3[3], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[3], E3, wrong_binding, omegavec[0:2])]


		G.addFacNode(P123,x3,x1,x2)

		# below for factor node P124
		P124 = np.zeros((2,2,2)) # p(x4|x1 x2)
		P124[:,0,0]=[1-conditional_prob_on(Pa4[0], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[0], E4, wrong_binding, omegavec[0:2])]
		P124[:,0,1]=[1-conditional_prob_on(Pa4[1], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[1], E4, wrong_binding, omegavec[0:2])]
		P124[:,1,0]=[1-conditional_prob_on(Pa4[2], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[2], E4, wrong_binding, omegavec[0:2])]
		P124[:,1,1]=[1-conditional_prob_on(Pa4[3], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[3], E4, wrong_binding, omegavec[0:2])]


		G.addFacNode(P124,x4,x1,x2)

		# below for factor node P125
		P125 = np.zeros((2,2,2)) # p(x5|x1 x2)
		P125[:,0,0]=[1-conditional_prob_on(Pa5[0], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[0], E5, wrong_binding, omegavec[0:2])]
		P125[:,0,1]=[1-conditional_prob_on(Pa5[1], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[1], E5, wrong_binding, omegavec[0:2])]
		P125[:,1,0]=[1-conditional_prob_on(Pa5[2], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[2], E5, wrong_binding, omegavec[0:2])]
		P125[:,1,1]=[1-conditional_prob_on(Pa5[3], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[3], E5, wrong_binding, omegavec[0:2])]


		G.addFacNode(P125,x5,x1,x2)


		# below for factor node P3456
		P3456 = np.zeros((2,2,2,2)) # p(x6|x3 x4 x5)
		#Pa 6 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111
		P3456[:,0,0,0]=[1-conditional_prob_on(Pa6[0], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[0], E6, wrong_binding, omegavec[2:5])]
		P3456[:,0,0,1]=[1-conditional_prob_on(Pa6[1], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[1], E6, wrong_binding, omegavec[2:5])]
		P3456[:,0,1,0]=[1-conditional_prob_on(Pa6[2], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[2], E6, wrong_binding, omegavec[2:5])]
		P3456[:,0,1,1]=[1-conditional_prob_on(Pa6[3], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[3], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,0,0]=[1-conditional_prob_on(Pa6[4], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[4], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,0,1]=[1-conditional_prob_on(Pa6[5], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[5], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,1,0]=[1-conditional_prob_on(Pa6[6], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[6], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,1,1]=[1-conditional_prob_on(Pa6[7], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[7], E6, wrong_binding, omegavec[2:5])]

		G.addFacNode(P3456,x6,x3,x4,x5)

		# below for factor node P3457
		P3457 = np.zeros((2,2,2,2)) # p(x7|x3 x4 x5)
		#Pa 6 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111
		P3457[:,0,0,0]=[1-conditional_prob_on(Pa7[0], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[0], E7, wrong_binding, omegavec[2:5])]
		P3457[:,0,0,1]=[1-conditional_prob_on(Pa7[1], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[1], E7, wrong_binding, omegavec[2:5])]
		P3457[:,0,1,0]=[1-conditional_prob_on(Pa7[2], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[2], E7, wrong_binding, omegavec[2:5])]
		P3457[:,0,1,1]=[1-conditional_prob_on(Pa7[3], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[3], E7, wrong_binding, omegavec[2:5])]
		P3457[:,1,0,0]=[1-conditional_prob_on(Pa7[4], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[4], E7, wrong_binding, omegavec[2:5])]
		P3457[:,1,0,1]=[1-conditional_prob_on(Pa7[5], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[5], E7, wrong_binding, omegavec[2:5])]
		P3457[:,1,1,0]=[1-conditional_prob_on(Pa7[6], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[6], E7, wrong_binding, omegavec[2:5])]
		P3457[:,1,1,1]=[1-conditional_prob_on(Pa7[7], E7, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa7[7], E7, wrong_binding, omegavec[2:5])]

		G.addFacNode(P3457,x7,x3,x4,x5)

		# below for factor node P3457
		P3458 = np.zeros((2,2,2,2)) # p(x8|x3 x4 x5)
		#Pa 6 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111
		P3458[:,0,0,0]=[1-conditional_prob_on(Pa8[0], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[0], E8, wrong_binding, omegavec[2:5])]
		P3458[:,0,0,1]=[1-conditional_prob_on(Pa8[1], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[1], E8, wrong_binding, omegavec[2:5])]
		P3458[:,0,1,0]=[1-conditional_prob_on(Pa8[2], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[2], E8, wrong_binding, omegavec[2:5])]
		P3458[:,0,1,1]=[1-conditional_prob_on(Pa8[3], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[3], E8, wrong_binding, omegavec[2:5])]
		P3458[:,1,0,0]=[1-conditional_prob_on(Pa8[4], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[4], E8, wrong_binding, omegavec[2:5])]
		P3458[:,1,0,1]=[1-conditional_prob_on(Pa8[5], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[5], E8, wrong_binding, omegavec[2:5])]
		P3458[:,1,1,0]=[1-conditional_prob_on(Pa8[6], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[6], E8, wrong_binding, omegavec[2:5])]
		P3458[:,1,1,1]=[1-conditional_prob_on(Pa8[7], E8, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa8[7], E8, wrong_binding, omegavec[2:5])]

		G.addFacNode(P3458,x8,x3,x4,x5)

		# below for factor node P3457
		P6789 = np.zeros((2,2,2,2)) # p(x9|x6 x7 x8)
		#Pa 6 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111
		P6789[:,0,0,0]=[1-conditional_prob_on(Pa9[0], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[0], E9, wrong_binding, omegavec[5:8])]
		P6789[:,0,0,1]=[1-conditional_prob_on(Pa9[1], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[1], E9, wrong_binding, omegavec[5:8])]
		P6789[:,0,1,0]=[1-conditional_prob_on(Pa9[2], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[2], E9, wrong_binding, omegavec[5:8])]
		P6789[:,0,1,1]=[1-conditional_prob_on(Pa9[3], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[3], E9, wrong_binding, omegavec[5:8])]
		P6789[:,1,0,0]=[1-conditional_prob_on(Pa9[4], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[4], E9, wrong_binding, omegavec[5:8])]
		P6789[:,1,0,1]=[1-conditional_prob_on(Pa9[5], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[5], E9, wrong_binding, omegavec[5:8])]
		P6789[:,1,1,0]=[1-conditional_prob_on(Pa9[6], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[6], E9, wrong_binding, omegavec[5:8])]
		P6789[:,1,1,1]=[1-conditional_prob_on(Pa9[7], E9, wrong_binding, omegavec[5:8]), conditional_prob_on(Pa9[7], E9, wrong_binding, omegavec[5:8])]

		G.addFacNode(P6789,x9,x6,x7,x8)

	
		

		brute = G.bruteForce()
		distx9 = G.marginalizeBrute(brute, 'x9')
		marginal9[0]= float(distx9[0]) # x9 off
		marginal9[1]= float(distx9[1]) # x9 on

	
	

		# Calculate P912 = P(x9| x1 x2)
		# first trace out x3
		P9traceout6 = np.zeros((2,2,2,2,2,2,2,2)) # P(x9| x1 x2 x3 x4 x5 x7 x8)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 7)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x4
			i4 = tmp[i][3][0] # index for x5
			i5 = tmp[i][4][0] # index for x6
			i7 = tmp[i][5][0] # index for x7
			i8 = tmp[i][6][0] # index for x8
			# Note Plastlayer = P(9| 3 4 5 6 7 8)
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			P9traceout6[0,i1,i2,i3,i4,i5,i7,i8]  = P6789[0,0,i7, i8]*P3456[0,i3,i4,i5] + P6789[0,1,i7, i8]*P3456[1,i3,i4,i5]
			P9traceout6[1,i1,i2,i3,i4,i5,i7,i8]  = P6789[1,0,i7, i8]*P3456[0,i3,i4,i5] + P6789[1,1,i7, i8]*P3456[1,i3,i4,i5]

		P9traceout67 = np.zeros((2,2,2,2,2,2,2)) # P(x9| x1 x2 x3 x4 x5 x8)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 6)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x4
			i4 = tmp[i][3][0] # index for x5
			i5 = tmp[i][4][0] # index for x7
			i8 = tmp[i][5][0] # index for x8
			# Note Plastlayer = P(9| 3 4 5 6 7 8)
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			P9traceout67[0,i1,i2,i3,i4,i5,i8]  = P9traceout6[0,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5] + P9traceout6[0,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]
			P9traceout67[1,i1,i2,i3,i4,i5,i8]  = P9traceout6[1,i1,i2,i3,i4,i5,0,i8]*P3457[0,i3,i4,i5] + P9traceout6[1,i1,i2,i3,i4,i5,1,i8]*P3457[1,i3,i4,i5]

		P9traceout678 = np.zeros((2,2,2,2,2,2)) # P(x9| x1 x2 x3 x4 x5)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 5)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x4
			i4 = tmp[i][3][0] # index for x5
			i5 = tmp[i][4][0] # index for x7
			# Note Plastlayer = P(9| 3 4 5 6 7 8)
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			P9traceout678[0,i1,i2,i3,i4,i5]  = P9traceout67[0,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5] + P9traceout67[0,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]
			P9traceout678[1,i1,i2,i3,i4,i5]  = P9traceout67[1,i1,i2,i3,i4,i5,0]*P3458[0,i3,i4,i5] + P9traceout67[1,i1,i2,i3,i4,i5,1]*P3458[1,i3,i4,i5]


		P9traceout6785 = np.zeros((2,2,2,2,2)) # P(x9| x1 x2 x3 x4)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 4)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x5
			i4 = tmp[i][3][0] # index for x7
			# Note Plastlayer = P(9| 3 4 5 6 7 8)
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			P9traceout6785[0,i1,i2,i3,i4]  = P9traceout678[0,i1,i2,i3,i4,0]*P125[0,i1,i2] + P9traceout678[0,i1,i2,i3,i4,1]*P125[1,i1,i2]
			P9traceout6785[1,i1,i2,i3,i4]  = P9traceout678[1,i1,i2,i3,i4,0]*P125[0,i1,i2] + P9traceout678[1,i1,i2,i3,i4,1]*P125[1,i1,i2]

		P9traceout67854 = np.zeros((2,2,2,2)) # P(x9| x1 x2 x5)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			i3 = tmp[i][2][0] # index for x7
			# Note Plastlayer = P(9| 3 4 5 6 7 8)
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			P9traceout67854[0,i1,i2,i3]  = P9traceout6785[0,i1,i2,i3,0]*P124[0,i1,i2] + P9traceout6785[0,i1,i2,i3,1]*P124[1,i1,i2]
			P9traceout67854[1,i1,i2,i3]  = P9traceout6785[1,i1,i2,i3,0]*P124[0,i1,i2] + P9traceout6785[1,i1,i2,i3,1]*P124[1,i1,i2]


		P912 = np.zeros((2,2,2)) # P(x9| x1 x2)
		P912joint = np.zeros((2,2,2))
		P12 = np.outer(P1,P2)
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0] # index for x1
			i2 = tmp[i][1][0] # index for x2
			# Note Plastlayer = P(9| 3 4 5 6 7 8)
			# P9traceout4 = P(9| 1 2 4 5 6 7 8)
			P912[0,i1,i2]  = P9traceout67854[0,i1,i2,0]*P125[0,i1,i2] + P9traceout67854[0,i1,i2,1]*P125[1,i1,i2]
			P912[1,i1,i2]  = P9traceout67854[1,i1,i2,0]*P125[0,i1,i2] + P9traceout67854[1,i1,i2,1]*P125[1,i1,i2]

		'''
		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0]
			i = tmp[i][1][0]
			P912joint[0,i1,i2] = P912[0,i1,i2]*P12[i1,i2]
			P912joint[1,i1,i2] = P912[1,i1,i2]*P12[i1,i2]
	


	
		P12 = np.outer(P1,P2)
		P912joint = np.zeros((2,2,2))

		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0]
			i2 = tmp[i][1][0]
			P912joint[0,i1,i2] = P912[0,i1,i2]*P12[i1,i2]
			P912joint[1,i1,i2] = P912[1,i1,i2]*P12[i1,i2]

		#P9 = np.sum(np.sum(P912joint, axis = 1), axis = 1)
		#marginal9 = np.array(P9)
		ttmp =np.sum(P912joint, axis = 1)
		P9 = np.sum(ttmp, axis = 1)
		#marginal9 = P9
		'''

		P912 = P912 + 1e-8 
		
	
		
	
		MI[ind, inputProb] =  np.dot( np.transpose(P2), np.sum(P1*np.multiply(P912[0,:,:], np.log2(P912[0,:,:]/marginal9[0])) + P1*np.multiply(P912[1,:,:], np.log2(P912[1,:,:]/marginal9[1])), axis = 0))
		





		#MI[ind, inputProb] = np.dot( np.transpose(P2), np.sum(P1*np.multiply(P124[0,:,:], np.log(P124[0,:,:]/marginal4[0])) + P1*np.multiply(P124[1,:,:], np.log(P124[1,:,:]/marginal4[1])), axis = 0))
		Ebindall[ind+1,:, inputProb] = Ebindall[ind, :, inputProb] - learning_eta*InfoMaxGD(P1, P2, P912, marginal9, P123, P124, P125, P3456, P3457, P3458
			,P9traceout6, P9traceout67, P9traceout678, P9traceout6785, P9traceout67854, Ebindall[ind, :, inputProb], wrong_binding, omegavec, regularization)
		G.reset()		




#print MI.shape
#print MI
#print Ebindall[0,: ,len(Pinput1)-1]

#print MI[NGD-1,:]

MImax = np.amax(MI, axis=0)		
print MImax

file_name = create_name(learning_eta, regularization, NGD) 
name = os.path.join(dir_name, file_name)
pickle.dump( {'BindingEnergy':Ebindall, 'MIall': MI, 'MImax': MImax}, open(name, 'wb'))


		




#print MI.shape
print Ebindall[NGD-1,:, 0]
print Ebindall[NGD-1,:, 2]

runtick = np.linspace(1,NGD, num=NGD)
plt.plot(runtick, MI[:,0], runtick, MI[:,1], '--',runtick, MI[:,2], runtick, MI[:,3],  linewidth=3.0)
plt.xlabel('Gradient ascent runs', fontsize = fl+4)
plt.ylabel('Mutual Information $MI(x_{in};\, x_6)$', fontsize = fl+4)
plt.xticks(fontsize = ft+4)
plt.yticks(fontsize = ft+4)
plt.legend([r'$P(x_{{in}}=1)=0.2$', r'$P(x_{{in}}=1)=0.4$', r'$P(x_{{in}}=1)=0.5$', r'$P(x_{{in}}=1)=0.8$'], shadow=True, fancybox=True, loc=(0.5, 0.3), fontsize=14+2)
plt.show()

#plt.show(block = True)

'''
full_str = 'InfoMax231LearningCurve'
fig_name = os.path.join(dir_name, full_str )
fig.savefig(fig_name+'.eps', bbox_inches='tight')
#fig.savefig(fig_name+'.eps')
#fig.savefig(fig_name+'.png')
#fig.savefig(fig_name+'.pdf', bbox_inches='tight')
fig.savefig(fig_name+'.pdf')
#fig.savefig(fig_name+'.eps')

'''


