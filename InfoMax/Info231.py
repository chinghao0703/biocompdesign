from graph import Graph
from scipy import stats
import numpy as np
import itertools
import math
import sys
import os as os
import cPickle as pickle
from matplotlib import pyplot as plt
import seaborn




dir_current = os.getcwd()
dir_name = dir_current + '/figure'

# set up figure
fig = plt.figure()
#ax = fig.add_subplot(111)
ft = 15 # tick font size
fl = 16 # label font size
fs_s = 12 # small text font size
ms = 5 # marker size
lw = 3 # line width size



"""
This code shows how to use BP (sum-product alg)+ gradient ascent opt. to 
get the marginals of each kinases. 

New IC:  Ebind[0,:] = np.array([-5,-3,-3,-3]) 
original IC : Ebind[0,:] = np.array([-1,-2,-1,-1.5])

New omega" omega3 = 2, omegarest = 8 (i.e. freq3 =0.5, freqrest =0.125)
original omega: all omega = 4


"""




def conditional_prob_on(PAstate, Ematrix, Wbind, omega):
	
	"""
	The conditional prob is dependent on the biophysical model

	"""
	if isinstance(omega, float):
		omega = np.array([omega])

	omegainv= omega**-1
	num = 0.0
	den = 0.0
	


	for j in range(0,len(Ematrix)):
		num = num + omegainv[j]*np.exp(-Ematrix[j])*PAstate[j]
		den = den + omegainv[j]*(np.exp(-Ematrix[j])*PAstate[j] + np.exp(-Wbind)*(1-PAstate[j]))
	
	return num / (1 + den)



"""
get_mn_log_likelihood() function is not used in this program

"""
def get_mn_log_likelihood(obs,probs):
	""" Return the (log)likelihood of obs, given the probs"""
	# Multinomial Distribution Log PMF
	# ln (pdf)      =             multinomial coeff            *   product of probabilities
	# ln[f(x|n, p)] = [ln(n!) - (ln(x1!)+ln(x2!)+...+ln(xk!))] + [x1*ln(p1)+x2*ln(p2)+...+xk*ln(pk)]     

	multinomial_coeff_denom= 0
	prod_probs = 0
	for x in range(0,len(obs)): # loop through state counts in each observation
		multinomial_coeff_denom = multinomial_coeff_denom + math.log(math.factorial(obs[x]))
		prod_probs = prod_probs + obs[x]*math.log(probs[x])
	 
	multinomial_coeff = math.log(math.factorial(sum(obs))) -  multinomial_coeff_denom
	likelihood = multinomial_coeff + prod_probs
	return likelihood


def sample_generate(margDist, Nsamples):
	""" margDist is a 2-tuple of len(margDist)
		This functions returns a sample of data generated by the marg prob specified
	"""
	xk = np.arange(2)
	margsamples = np.zeros([len(margDist), Nsamples]) 
	for tupleindex in xrange(len(margDist)):
		custm = stats.rv_discrete(name='custm', values=(xk, margDist[tupleindex]))
		margsamples[tupleindex, :]= custm.rvs(size= Nsamples)

	return margsamples


def InfoMaxGD(P1, P2, P126, P6, P3456, P123, P124, P125, bindingE, bindingW, oall, regC):

	nabla_E = np.zeros(len(bindingE))
	underflowcutoff = 0.001


	freqall= oall**-1
	delP3_12_1 = np.zeros((2,2,2), dtype = float)
	delP3_12_2 = np.zeros((2,2,2), dtype = float)
	delP4_12_1 = np.zeros((2,2,2), dtype = float)
	delP4_12_2 = np.zeros((2,2,2), dtype = float)
	delP5_12_1 = np.zeros((2,2,2), dtype = float)
	delP5_12_2 = np.zeros((2,2,2), dtype = float)
	delP6_345_3 = np.zeros((2,2,2,2), dtype = float)
	delP6_345_4 = np.zeros((2,2,2,2), dtype = float)
	delP6_345_5 = np.zeros((2,2,2,2), dtype = float)
	delf612_13 = np.zeros((2,2,2), dtype = float)
	delf612_23 = np.zeros((2,2,2), dtype = float)
	delf612_14 = np.zeros((2,2,2), dtype = float)
	delf612_24 = np.zeros((2,2,2), dtype = float)
	delf612_15 = np.zeros((2,2,2), dtype = float)
	delf612_25 = np.zeros((2,2,2), dtype = float)
	delf612_36 = np.zeros((2,2,2), dtype = float)
	delf612_46 = np.zeros((2,2,2), dtype = float)
	delf612_56 = np.zeros((2,2,2), dtype = float)



	for tstep in xrange(1):




		# bindingE[i]: i = 0, 1 (E31, E32, ngb of 3)
		#			       2, 3 (E41, E42, nbg of 4)
		#				   4, 5 (E51, E52, nbg of 5)
		#				   6, 7,  8  (E63, E64, E65, nbg of 6)
		#				   9, 10, 11 (E73, E74, E75, nbg of 7)

		

		# First calculate delP3_12_x
		delP3_12_1[1,0,0] = (-freqall[0]*np.exp(-bindingE[0])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*0.0
				+freqall[1]*np.exp(-bindingE[1])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0))**2)


		delP3_12_1[1,1,0] = (-freqall[0]*np.exp(-bindingE[0])*1*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*1.0
				+freqall[1]*np.exp(-bindingE[1])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0))**2)


		delP3_12_1[1,0,1] = (-freqall[0]*np.exp(-bindingE[0])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*0.0
				+freqall[1]*np.exp(-bindingE[1])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0))**2)


		delP3_12_1[1,1,1] = (-freqall[0]*np.exp(-bindingE[0])*1.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*1.0
				+freqall[1]*np.exp(-bindingE[1])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0))**2)


		delP3_12_1[0,:,:] = 1- delP3_12_1[1,:,:]




		delP3_12_2[1,0,0] = (-freqall[1]*np.exp(-bindingE[1])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*0.0
				+freqall[1]*np.exp(-bindingE[1])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0))**2)


		delP3_12_2[1,0,1] = (-freqall[1]*np.exp(-bindingE[1])*1*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*0.0
				+freqall[1]*np.exp(-bindingE[1])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0))**2)


		delP3_12_2[1,1,0] = (-freqall[1]*np.exp(-bindingE[1])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*1.0
				+freqall[1]*np.exp(-bindingE[1])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0))**2)


		delP3_12_2[1,1,1] = (-freqall[1]*np.exp(-bindingE[1])*1.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[0])*1.0
				+freqall[1]*np.exp(-bindingE[1])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0))**2)


		delP3_12_2[0,:,:] = 1- delP3_12_2[1,:,:]



		# Below calculate delP4_12_x
		# reminder: bindingE[i]: i= 2, 3 (E41, E42, nbg of 4)

		delP4_12_1[1,0,0] = (-freqall[0]*np.exp(-bindingE[2])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*0.0
				+freqall[1]*np.exp(-bindingE[3])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0))**2)


		delP4_12_1[1,1,0] = (-freqall[0]*np.exp(-bindingE[2])*1*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*1.0
				+freqall[1]*np.exp(-bindingE[3])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0))**2)


		delP4_12_1[1,0,1] = (-freqall[0]*np.exp(-bindingE[2])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*0.0
				+freqall[1]*np.exp(-bindingE[3])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0))**2)


		delP4_12_1[1,1,1] = (-freqall[0]*np.exp(-bindingE[2])*1.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*1.0
				+freqall[1]*np.exp(-bindingE[3])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0))**2)


		delP4_12_1[0,:,:] = 1- delP4_12_1[1,:,:]




		delP4_12_2[1,0,0] = (-freqall[1]*np.exp(-bindingE[3])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*0.0
				+freqall[1]*np.exp(-bindingE[3])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0))**2)


		delP4_12_2[1,0,1] = (-freqall[1]*np.exp(-bindingE[3])*1*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*0.0
				+freqall[1]*np.exp(-bindingE[3])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0))**2)


		delP4_12_2[1,1,0] = (-freqall[1]*np.exp(-bindingE[3])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*1.0
				+freqall[1]*np.exp(-bindingE[3])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0))**2)


		delP4_12_2[1,1,1] = (-freqall[1]*np.exp(-bindingE[3])*1.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[2])*1.0
				+freqall[1]*np.exp(-bindingE[3])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0))**2)


		delP4_12_2[0,:,:] = 1- delP4_12_2[1,:,:]




		# Below calculate delP5_12_x
		# reminder: bindingE[i]: i= 4, 5 (E51, E52, nbg of 5)

		delP5_12_1[1,0,0] = (-freqall[0]*np.exp(-bindingE[4])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*0.0
				+freqall[1]*np.exp(-bindingE[5])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0))**2)


		delP5_12_1[1,1,0] = (-freqall[0]*np.exp(-bindingE[4])*1*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*1.0
				+freqall[1]*np.exp(-bindingE[5])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0))**2)


		delP5_12_1[1,0,1] = (-freqall[0]*np.exp(-bindingE[4])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*0.0
				+freqall[1]*np.exp(-bindingE[5])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0))**2)


		delP5_12_1[1,1,1] = (-freqall[0]*np.exp(-bindingE[4])*1.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*1.0
				+freqall[1]*np.exp(-bindingE[5])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0))**2)


		delP5_12_1[0,:,:] = 1- delP5_12_1[1,:,:]




		delP5_12_2[1,0,0] = (-freqall[1]*np.exp(-bindingE[5])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*0.0
				+freqall[1]*np.exp(-bindingE[5])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*0.0))**2)


		delP5_12_2[1,0,1] = (-freqall[1]*np.exp(-bindingE[5])*1*(1
				+(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*0.0
				+freqall[1]*np.exp(-bindingE[5])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*0.0-freqall[1]*1.0))**2)


		delP5_12_2[1,1,0] = (-freqall[1]*np.exp(-bindingE[5])*0.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*1.0
				+freqall[1]*np.exp(-bindingE[5])*0.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*0.0))**2)


		delP5_12_2[1,1,1] = (-freqall[1]*np.exp(-bindingE[5])*1.0*(1
				+(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0)*np.exp(-bindingW)))/((1
				+freqall[0]*np.exp(-bindingE[4])*1.0
				+freqall[1]*np.exp(-bindingE[5])*1.0
				+np.exp(-bindingW)*(freqall[0]+freqall[1]-freqall[0]*1.0-freqall[1]*1.0))**2)


		delP5_12_2[0,:,:] = 1- delP5_12_2[1,:,:]


		delP6_345_3[1,0,0,0] = (-freqall[2]*np.exp(-bindingE[6])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*0.0))**2)

		delP6_345_3[1,1,0,0] = (-freqall[2]*np.exp(-bindingE[6])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*0.0))**2)

		delP6_345_3[1,0,1,0] = (-freqall[2]*np.exp(-bindingE[6])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*0.0))**2)

		delP6_345_3[1,0,0,1] = (-freqall[2]*np.exp(-bindingE[6])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*1.0))**2)

		delP6_345_3[1,1,1,0] = (-freqall[2]*np.exp(-bindingE[6])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*0.0))**2)

		delP6_345_3[1,1,0,1] = (-freqall[2]*np.exp(-bindingE[6])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*1.0))**2)

		delP6_345_3[1,0,1,1] = (-freqall[2]*np.exp(-bindingE[6])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*1.0))**2)

		delP6_345_3[1,1,1,1] = (-freqall[2]*np.exp(-bindingE[6])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*1.0))**2)

		delP6_345_3[0,:,:,:] = 1- delP6_345_3[1,:,:,:]

		###
		###
		delP6_345_4[1,0,0,0] = (-freqall[3]*np.exp(-bindingE[7])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*0.0))**2)

		delP6_345_4[1,1,0,0] = (-freqall[3]*np.exp(-bindingE[7])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*0.0))**2)

		delP6_345_4[1,0,1,0] = (-freqall[3]*np.exp(-bindingE[7])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*0.0))**2)

		delP6_345_4[1,0,0,1] = (-freqall[3]*np.exp(-bindingE[7])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*1.0))**2)

		delP6_345_4[1,1,1,0] = (-freqall[3]*np.exp(-bindingE[7])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*0.0))**2)

		delP6_345_4[1,1,0,1] = (-freqall[3]*np.exp(-bindingE[7])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*1.0))**2)

		delP6_345_4[1,0,1,1] = (-freqall[3]*np.exp(-bindingE[7])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*1.0))**2)

		delP6_345_4[1,1,1,1] = (-freqall[3]*np.exp(-bindingE[7])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*1.0))**2)

		delP6_345_4[0,:,:,:] = 1- delP6_345_4[1,:,:,:]


		delP6_345_5[1,0,0,0] = (-freqall[4]*np.exp(-bindingE[8])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*0.0))**2)

		delP6_345_5[1,1,0,0] = (-freqall[4]*np.exp(-bindingE[8])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*0.0))**2)

		delP6_345_5[1,0,1,0] = (-freqall[4]*np.exp(-bindingE[8])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*0.0))**2)

		delP6_345_5[1,0,0,1] = (-freqall[4]*np.exp(-bindingE[8])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*0.0-freqall[4]*1.0))**2)

		delP6_345_5[1,1,1,0] = (-freqall[4]*np.exp(-bindingE[8])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*0.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*0.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*0.0))**2)

		delP6_345_5[1,1,0,1] = (-freqall[4]*np.exp(-bindingE[8])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*0.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*0.0-freqall[4]*1.0))**2)

		delP6_345_5[1,0,1,1] = (-freqall[4]*np.exp(-bindingE[8])*0.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*0.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*0.0-freqall[3]*1.0-freqall[4]*1.0))**2)

		delP6_345_5[1,1,1,1] = (-freqall[4]*np.exp(-bindingE[8])*1.0*(1
				+(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*1.0)*np.exp(-bindingW)))/((1
				+freqall[2]*np.exp(-bindingE[6])*1.0
				+freqall[3]*np.exp(-bindingE[7])*1.0
				+freqall[4]*np.exp(-bindingE[8])*1.0
				+np.exp(-bindingW)*(freqall[2]+freqall[3]+freqall[4]-freqall[2]*1.0-freqall[3]*1.0-freqall[4]*1.0))**2)

		delP6_345_5[0,:,:,:] = 1- delP6_345_5[1,:,:,:]


		


		# next merge delP3_12_1, delP3_12_2 with P(5|12) P(4|12) and P(6|345) and marginalize over x3 x4 x5 to get the 
		# gradient with respect to epsilon_13
		# P3456 = np.zeros((2,2,2,2)) # p(x6|x3 x4 x5)
		#Pa 6 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111

		
		fmerge = delP3_12_1[0,0,0]*P3456[:,0,:,:] + delP3_12_1[1,0,0]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,0,0]+ fmerge[:,1,:]*P124[1,0,0] #[x6, x5] for (x1, x2) = (0,0) 
		delf612_13[:,0,0] = fmerge[:,0]*P125[0,0,0] + fmerge[:,1]*P125[1,0,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0.0))

		fmerge = delP3_12_1[0,0,1]*P3456[:,0,:,:] + delP3_12_1[1,0,1]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,0,1]+ fmerge[:,1,:]*P124[1,0,1] #[x6, x5] for (x1, x2) = (0,1) 
		delf612_13[:,0,1] = fmerge[:,0]*P125[0,0,1] + fmerge[:,1]*P125[1,0,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0, 1))

		fmerge = delP3_12_1[0,1,0]*P3456[:,0,:,:] + delP3_12_1[1,1,0]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,1,0]+ fmerge[:,1,:]*P124[1,1,0] #[x6, x5] for (x1, x2) = (1,0) 
		delf612_13[:,1,0] = fmerge[:,0]*P125[0,1,0] + fmerge[:,1]*P125[1,1,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,0))

		fmerge = delP3_12_1[0,1,1]*P3456[:,0,:,:] + delP3_12_1[1,1,1]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,1,1]+ fmerge[:,1,:]*P124[1,1,1] #[x6, x5] for (x1, x2) = (1,1) 
		delf612_13[:,1,1] = fmerge[:,0]*P125[0,1,1] + fmerge[:,1]*P125[1,1,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,1))


		# next do the same to get delf612_23
		fmerge = delP3_12_2[0,0,0]*P3456[:,0,:,:] + delP3_12_2[1,0,0]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,0,0]+ fmerge[:,1,:]*P124[1,0,0] #[x6, x5] for (x1, x2) = (0,0) 
		delf612_23[:,0,0] = fmerge[:,0]*P125[0,0,0] + fmerge[:,1]*P125[1,0,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0.0))

		fmerge = delP3_12_2[0,0,1]*P3456[:,0,:,:] + delP3_12_2[1,0,1]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,0,1]+ fmerge[:,1,:]*P124[1,0,1] #[x6, x5] for (x1, x2) = (0,1) 
		delf612_23[:,0,1] = fmerge[:,0]*P125[0,0,1] + fmerge[:,1]*P125[1,0,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0, 1))

		fmerge = delP3_12_2[0,1,0]*P3456[:,0,:,:] + delP3_12_2[1,1,0]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,1,0]+ fmerge[:,1,:]*P124[1,1,0] #[x6, x5] for (x1, x2) = (1,0) 
		delf612_23[:,1,0] = fmerge[:,0]*P125[0,1,0] + fmerge[:,1]*P125[1,1,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,0))

		fmerge = delP3_12_2[0,1,1]*P3456[:,0,:,:] + delP3_12_2[1,1,1]*P3456[:,1,:,:] # [x6, x4, x5]
		fmerge = fmerge[:,0,:]*P124[0,1,1]+ fmerge[:,1,:]*P124[1,1,1] #[x6, x5] for (x1, x2) = (1,1) 
		delf612_23[:,1,1] = fmerge[:,0]*P125[0,1,1] + fmerge[:,1]*P125[1,1,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,1))


		# next get delf612_14
		###############################
		fmerge = delP4_12_1[0,0,0]*P3456[:,:,0,:] + delP4_12_1[1,0,0]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,0,0]+ fmerge[:,1,:]*P123[1,0,0] #[x6, x5] for (x1, x2) = (0,0) 
		delf612_14[:,0,0] = fmerge[:,0]*P125[0,0,0] + fmerge[:,1]*P125[1,0,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0.0))

		fmerge = delP4_12_1[0,0,1]*P3456[:,:,0,:] + delP4_12_1[1,0,1]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,0,1]+ fmerge[:,1,:]*P123[1,0,1] #[x6, x5] for (x1, x2) = (0,1) 
		delf612_14[:,0,1] = fmerge[:,0]*P125[0,0,1] + fmerge[:,1]*P125[1,0,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0, 1))

		fmerge = delP4_12_1[0,1,0]*P3456[:,:,0,:] + delP4_12_1[1,1,0]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,1,0]+ fmerge[:,1,:]*P123[1,1,0] #[x6, x5] for (x1, x2) = (1,0) 
		delf612_14[:,1,0] = fmerge[:,0]*P125[0,1,0] + fmerge[:,1]*P125[1,1,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,0))

		fmerge = delP4_12_1[0,1,1]*P3456[:,:,0,:] + delP4_12_1[1,1,1]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,1,1]+ fmerge[:,1,:]*P123[1,1,1] #[x6, x5] for (x1, x2) = (1,1) 
		delf612_14[:,1,1] = fmerge[:,0]*P125[0,1,1] + fmerge[:,1]*P125[1,1,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,1))


		# next do the same to get delf612_24
		fmerge = delP4_12_2[0,0,0]*P3456[:,:,0,:] + delP4_12_2[1,0,0]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,0,0]+ fmerge[:,1,:]*P123[1,0,0] #[x6, x5] for (x1, x2) = (0,0) 
		delf612_24[:,0,0] = fmerge[:,0]*P125[0,0,0] + fmerge[:,1]*P125[1,0,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0.0))

		fmerge = delP4_12_2[0,0,1]*P3456[:,:,0,:] + delP4_12_2[1,0,1]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,0,1]+ fmerge[:,1,:]*P123[1,0,1] #[x6, x5] for (x1, x2) = (0,1) 
		delf612_24[:,0,1] = fmerge[:,0]*P125[0,0,1] + fmerge[:,1]*P125[1,0,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0, 1))

		fmerge = delP4_12_2[0,1,0]*P3456[:,:,0,:] + delP4_12_2[1,1,0]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,1,0]+ fmerge[:,1,:]*P123[1,1,0] #[x6, x5] for (x1, x2) = (1,0) 
		delf612_24[:,1,0] = fmerge[:,0]*P125[0,1,0] + fmerge[:,1]*P125[1,1,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,0))

		fmerge = delP4_12_2[0,1,1]*P3456[:,:,0,:] + delP4_12_2[1,1,1]*P3456[:,:,1,:] # [x6, x3, x5]
		fmerge = fmerge[:,0,:]*P123[0,1,1]+ fmerge[:,1,:]*P123[1,1,1] #[x6, x5] for (x1, x2) = (1,1) 
		delf612_24[:,1,1] = fmerge[:,0]*P125[0,1,1] + fmerge[:,1]*P125[1,1,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,1))

		# next get delf612_15
		###############################
		fmerge = delP5_12_1[0,0,0]*P3456[:,:,:,0] + delP5_12_1[1,0,0]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,0,0]+ fmerge[:,1,:]*P123[1,0,0] #[x6, x4] for (x1, x2) = (0,0) 
		delf612_15[:,0,0] = fmerge[:,0]*P124[0,0,0] + fmerge[:,1]*P124[1,0,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0.0))

		fmerge = delP5_12_1[0,0,1]*P3456[:,:,:,0] + delP5_12_1[1,0,1]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,0,1]+ fmerge[:,1,:]*P123[1,0,1] #[x6, x4] for (x1, x2) = (0,1) 
		delf612_15[:,0,1] = fmerge[:,0]*P124[0,0,1] + fmerge[:,1]*P124[1,0,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0, 1))

		fmerge = delP5_12_1[0,1,0]*P3456[:,:,:,0] + delP5_12_1[1,1,0]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,1,0]+ fmerge[:,1,:]*P123[1,1,0] #[x6, x4] for (x1, x2) = (1,0) 
		delf612_15[:,1,0] = fmerge[:,0]*P124[0,1,0] + fmerge[:,1]*P124[1,1,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,0))

		fmerge = delP5_12_1[0,1,1]*P3456[:,:,:,0] + delP5_12_1[1,1,1]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,1,1]+ fmerge[:,1,:]*P123[1,1,1] #[x6, x4] for (x1, x2) = (1,1) 
		delf612_15[:,1,1] = fmerge[:,0]*P124[0,1,1] + fmerge[:,1]*P124[1,1,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,1))


		# next do the same to get delf612_25
		fmerge = delP5_12_2[0,0,0]*P3456[:,:,:,0] + delP5_12_2[1,0,0]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,0,0]+ fmerge[:,1,:]*P123[1,0,0] #[x6, x4] for (x1, x2) = (0,0) 
		delf612_25[:,0,0] = fmerge[:,0]*P124[0,0,0] + fmerge[:,1]*P124[1,0,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0.0))

		fmerge = delP5_12_2[0,0,1]*P3456[:,:,:,0] + delP5_12_2[1,0,1]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,0,1]+ fmerge[:,1,:]*P123[1,0,1] #[x6, x4] for (x1, x2) = (0,1) 
		delf612_25[:,0,1] = fmerge[:,0]*P124[0,0,1] + fmerge[:,1]*P124[1,0,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (0, 1))

		fmerge = delP5_12_2[0,1,0]*P3456[:,:,:,0] + delP5_12_2[1,1,0]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,1,0]+ fmerge[:,1,:]*P123[1,1,0] #[x6, x4] for (x1, x2) = (1,0) 
		delf612_25[:,1,0] = fmerge[:,0]*P124[0,1,0] + fmerge[:,1]*P124[1,1,0] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,0))

		fmerge = delP5_12_2[0,1,1]*P3456[:,:,:,0] + delP5_12_2[1,1,1]*P3456[:,:,:,1] # [x6, x3, x4]
		fmerge = fmerge[:,0,:]*P123[0,1,1]+ fmerge[:,1,:]*P123[1,1,1] #[x6, x4] for (x1, x2) = (1,1) 
		delf612_25[:,1,1] = fmerge[:,0]*P124[0,1,1] + fmerge[:,1]*P124[1,1,1] # del P(6|1,2)/ del epsilon_{13} at (x1, x2) = (1,1))



		###
		# now deal with delf612_36
		####

		gmerge = delP6_345_3[:,0,:,:]*P123[0,0,0] + delP6_345_3[:,1,:,:]*P123[1,0,0] # (x6 x4 x5)
		gmerge = gmerge[:,0,:]*P124[0,0,0] + gmerge[:,1,:]*P124[1,0,0] # (x6 x5)
		delf612_36[:,0,0] = gmerge[:,0]*P125[0,0,0]+ gmerge[:,1]*P125[1,0,0]

		gmerge = delP6_345_3[:,0,:,:]*P123[0,1,0] + delP6_345_3[:,1,:,:]*P123[1,1,0] # (x6 x4 x5)
		gmerge = gmerge[:,0,:]*P124[0,1,0] + gmerge[:,1,:]*P124[1,1,0] # (x6 x5)
		delf612_36[:,1,0] = gmerge[:,0]*P125[0,1,0]+ gmerge[:,1]*P125[1,1,0]

		gmerge = delP6_345_3[:,0,:,:]*P123[0,0,1] + delP6_345_3[:,1,:,:]*P123[1,0,1] # (x6 x4 x5)
		gmerge = gmerge[:,0,:]*P124[0,0,1] + gmerge[:,1,:]*P124[1,0,1] # (x6 x5)
		delf612_36[:,0,1] = gmerge[:,0]*P125[0,0,1]+ gmerge[:,1]*P125[1,0,1]

		gmerge = delP6_345_3[:,0,:,:]*P123[0,1,1] + delP6_345_3[:,1,:,:]*P123[1,1,1] # (x6 x4 x5)
		gmerge = gmerge[:,0,:]*P124[0,1,1] + gmerge[:,1,:]*P124[1,1,1] # (x6 x5)
		delf612_36[:,1,1] = gmerge[:,0]*P125[0,1,1]+ gmerge[:,1]*P125[1,1,1]

		###
		# now deal with delf612_46
		####

		gmerge = delP6_345_4[:,:,0,:]*P124[0,0,0] + delP6_345_4[:,:,1,:]*P124[1,0,0] # (x6 x3 x5)
		gmerge = gmerge[:,0,:]*P123[0,0,0] + gmerge[:,1,:]*P123[1,0,0] # (x6 x5)
		delf612_46[:,0,0] = gmerge[:,0]*P125[0,0,0]+ gmerge[:,1]*P125[1,0,0]

		gmerge = delP6_345_4[:,:,0,:]*P124[0,1,0] + delP6_345_4[:,:,1,:]*P124[1,1,0] # (x6 x3 x5)
		gmerge = gmerge[:,0,:]*P123[0,1,0] + gmerge[:,1,:]*P123[1,1,0] # (x6 x5)
		delf612_46[:,1,0] = gmerge[:,0]*P125[0,1,0]+ gmerge[:,1]*P125[1,1,0]

		gmerge = delP6_345_4[:,:,0,:]*P124[0,0,1] + delP6_345_4[:,:,1,:]*P124[1,0,1] # (x6 x3 x5)
		gmerge = gmerge[:,0,:]*P123[0,0,1] + gmerge[:,1,:]*P123[1,0,1] # (x6 x5)
		delf612_46[:,0,1] = gmerge[:,0]*P125[0,0,1]+ gmerge[:,1]*P125[1,0,1]

		gmerge = delP6_345_4[:,:,0,:]*P124[0,1,1] + delP6_345_4[:,:,1,:]*P124[1,1,1] # (x6 x3 x5)
		gmerge = gmerge[:,0,:]*P123[0,1,1] + gmerge[:,1,:]*P123[1,1,1] # (x6 x5)
		delf612_46[:,1,1] = gmerge[:,0]*P125[0,1,1]+ gmerge[:,1]*P125[1,1,1]


		###
		# now deal with delf612_56
		####

		gmerge = delP6_345_5[:,:,:,0]*P125[0,0,0] + delP6_345_5[:,:,:,1]*P125[1,0,0] # (x6 x3 x4)
		gmerge = gmerge[:,0,:]*P123[0,0,0] + gmerge[:,1,:]*P123[1,0,0] # (x6 x4)
		delf612_56[:,0,0] = gmerge[:,0]*P124[0,0,0]+ gmerge[:,1]*P124[1,0,0]

		gmerge = delP6_345_5[:,:,:,0]*P125[0,1,0] + delP6_345_5[:,:,:,1]*P125[1,1,0] # (x6 x3 x4)
		gmerge = gmerge[:,0,:]*P123[0,1,0] + gmerge[:,1,:]*P123[1,1,0] # (x6 x4)
		delf612_56[:,1,0] = gmerge[:,0]*P124[0,1,0]+ gmerge[:,1]*P124[1,1,0]

		gmerge = delP6_345_5[:,:,:,0]*P125[0,0,1] + delP6_345_5[:,:,:,1]*P125[1,0,1] # (x6 x3 x4)
		gmerge = gmerge[:,0,:]*P123[0,0,1] + gmerge[:,1,:]*P123[1,0,1] # (x6 x4)
		delf612_56[:,0,1] = gmerge[:,0]*P124[0,0,1]+ gmerge[:,1]*P124[1,0,1]

		gmerge = delP6_345_5[:,:,:,0]*P125[0,1,1] + delP6_345_5[:,:,:,1]*P125[1,1,1] # (x6 x3 x4)
		gmerge = gmerge[:,0,:]*P123[0,1,1] + gmerge[:,1,:]*P123[1,1,1] # (x6 x4)
		delf612_56[:,1,1] = gmerge[:,0]*P124[0,1,1]+ gmerge[:,1]*P124[1,1,1]




		# bindingE[i]: i = 0, 1 (E31, E32, ngb of 3)
		#			       2, 3 (E41, E42, nbg of 4)
		#				   4, 5 (E51, E52, nbg of 5)
		#				   6, 7,  8  (E63, E64, E65, nbg of 6)
		#				   9, 10, 11 (E73, E74, E75, nbg of 7)

		nabla_E[0] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_13[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_13[0,:,:]) + P1*(np.multiply(delf612_13[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_13[1,:,:]), axis = 0))-4*regC*nabla_E[0]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[1] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_23[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_23[0,:,:]) + P1*(np.multiply(delf612_23[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_23[1,:,:]), axis = 0))-4*regC*nabla_E[1]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[2] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_14[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_14[0,:,:]) + P1*(np.multiply(delf612_14[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_14[1,:,:]), axis = 0))-4*regC*nabla_E[2]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[3] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_24[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_24[0,:,:]) + P1*(np.multiply(delf612_24[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_24[1,:,:]), axis = 0))-4*regC*nabla_E[3]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[4] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_15[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_15[0,:,:]) + P1*(np.multiply(delf612_15[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_15[1,:,:]), axis = 0))-4*regC*nabla_E[4]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[5] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_25[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_25[0,:,:]) + P1*(np.multiply(delf612_25[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_25[1,:,:]), axis = 0))-4*regC*nabla_E[5]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[6] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_36[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_36[0,:,:]) + P1*(np.multiply(delf612_36[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_36[1,:,:]), axis = 0))-4*regC*nabla_E[6]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[7] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_46[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_46[0,:,:]) + P1*(np.multiply(delf612_46[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_46[1,:,:]), axis = 0))-4*regC*nabla_E[7]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		nabla_E[8] 	= np.dot( np.transpose(P2), np.sum(P1*(np.multiply(delf612_56[0,:,:], np.log2(P126[0,:,:]/P6[0]))+delf612_56[0,:,:]) + P1*(np.multiply(delf612_56[1,:,:], np.log2(P126[1,:,:]/P6[1]))+delf612_56[1,:,:]), axis = 0))-4*regC*nabla_E[8]#*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)




		#nabla_E[0]  = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(g124[0,:,:], np.log(P124[0,:,:]/P4[0]))+g124[0,:,:]) + P1*(np.multiply(g124[1,:,:], np.log(P124[1,:,:]/P4[1]))+g124[1,:,:]), axis = 0))-4*regC*nabla_E[0]*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)
		#nabla_E[1]  = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(h124[0,:,:], np.log(P124[0,:,:]/P4[0]))+h124[0,:,:]) + P1*(np.multiply(h124[1,:,:], np.log(P124[1,:,:]/P4[1]))+h124[1,:,:]), axis = 0))-4*regC*nabla_E[1]*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)	
		#nabla_E[2]  = np.dot( np.transpose(P2), np.sum(P1*(np.multiply(f124[0,:,:], np.log(P124[0,:,:]/P4[0]))+f124[0,:,:]) + P1*(np.multiply(f124[1,:,:], np.log(P124[1,:,:]/P4[1]))+f124[1,:,:]), axis = 0))-4*regC*nabla_E[2]*(nabla_E[0]**2+nabla_E[1]**2+nabla_E[2]**2)

		return nabla_E
			



def SGD(self, training_data, epochs, mini_batch_size, eta,
			test_data=None):
	"""Train the neural network using mini-batch stochastic
	gradient descent.  The ``training_data`` is a list of tuples
	``(x, y)`` representing the training inputs and the desired
	outputs.  The other non-optional parameters are
	self-explanatory.  If ``test_data`` is provided then the
	network will be evaluated against the test data after each
	epoch, and partial progress printed out.  This is useful for
	tracking progress, but slows things down substantially."""
	if test_data: n_test = len(test_data)
	n = len(training_data)
	for j in xrange(epochs):
		random.shuffle(training_data)
		mini_batches = [
			training_data[k:k+mini_batch_size]
			for k in xrange(0, n, mini_batch_size)]
		for mini_batch in mini_batches:
			[W, allbias] = self.update_mini_batch(mini_batch, eta)
		if test_data:
			print "Epoch {0}: {1} / {2}".format(
				j, self.evaluate(test_data), n_test)
		else:
			print "Epoch {0} complete".format(j)
	return [W, allbias]



def update_mini_batch(self, mini_batch, eta):

	"""Update the network's weights and biases by applying
	gradient descent using backpropagation to a single mini batch.
	The ``mini_batch`` is a list of tuples ``(x, y)``, and ``eta``
	is the learning rate."""
	nabla_b = [np.zeros(b.shape) for b in self.biases]
	nabla_w = [np.zeros(w.shape) for w in self.weights]
	for x, y in mini_batch:
		delta_nabla_b, delta_nabla_w = self.backprop(x, y)
		nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
		nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]
	self.weights = [w-(eta/len(mini_batch))*nw 
					for w, nw in zip(self.weights, nabla_w)]
	self.biases = [b-(eta/len(mini_batch))*nb 
					for b, nb in zip(self.biases, nabla_b)]

	return [self.weights, self.biases]



def create_name(learning_rate, reg_level, gdstep):
	
	str_r = 'InfoMax231AllInput' + str(learning_rate) +'_reg_levelC' + str(reg_level) + '_GDsteps'+ repr(gdstep) 

	return str_r


"""end of function specification"""





# Here are some parameters for learning and target function specification

#learning_eta = float(sys.argv[1])  # argument i in the batch file
#regularization = float(sys.argv[2]) # argument j in the batch file
#learning_eta = 0.025 
regularization = 0.0
learning_eta = 0.1
NGD= 100 # Gradient descent steps






# File I/O
dir_name='./'
case_num = 2 # for data manipulation 1 for uniform mu 


# First specify the initial binding affinities
Nproteins = 6
wrong_binding = 10.0  # This can be incorporated into learning

Pinput1 = (np.array([[0.8],[0.2]]), np.array([[0.68],[0.32]]), np.array([[0.6],[0.4]]), np.array([[0.2],[0.8]]))
Pinput2 = (np.array([[0.8],[0.2]]), np.array([[0.68],[0.32]]), np.array([[0.6],[0.4]]), np.array([[0.2],[0.8]]))

Ebind = 2.0*np.array([-4.0,-4.0,-4.0,-5.0 ,-3.7,-5.62,-1.2,-1.3, -1.8])
Ebind = -3.0+ np.zeros((1,9))
Ebindall = np.zeros((NGD+1, 9, len(Pinput1)), dtype = float)
MI = np.zeros((NGD, len(Pinput1)), dtype = float)




# here for chemical potential mu_i = - log omega_i
# for uniform case, set omega3= Nproteins

omegavec = np.zeros(Nproteins) + Nproteins  # homogenous
mu = - np.log(omegavec) # chemical potential


marginal6 = np.zeros([2,1]) # output




# Start main loop



for inputProb in xrange(len(Pinput1)):

	Ebindall[0,:, inputProb] = Ebind


	for ind in xrange(NGD):

		G = Graph()
		x1 = G.addVarNode('x1',2)
		x2 = G.addVarNode('x2',2)
		x3 = G.addVarNode('x3',2)
		x4 = G.addVarNode('x4',2)
		x5 = G.addVarNode('x5',2)
		x6 = G.addVarNode('x6',2)
	
	

		# Pa3, Pa4, Pa5 encodes (x1,x2)=(0,0), (0,1), (1,0), (1,1)

		Pa3 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
		Pa4 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
		Pa5 = np.array(list(itertools.product([[0],[1]], repeat = 2))) # repeat= |pa(x3)| 
			
		# Pa6, Pa7 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111, shape=8,3,1
		Pa6 = np.array(list(itertools.product([[0],[1]], repeat = 3)))
		

		#P1 = np.array([[0.8],[0.2]])  # p(x1)=[p(x1=0), p(x1=1)]
		P1 = Pinput1[inputProb] # assuming flat prior
		G.addFacNode(P1, x1)

		#P2 = np.array([[0.7],[0.3]])  # p(x2)
		P2 = Pinput2[inputProb] # assuming flat prior
		G.addFacNode(P2, x2)



		E3 = Ebindall[ind, 0:2, inputProb] # i.e. E13 E23, ngb of x3
		E4 = Ebindall[ind, 2:4, inputProb] # i.e. E14 E24, ngb of x4
		E5 = Ebindall[ind, 4:6, inputProb] # i.e. E15 E25, ngb of x5
		E6 = Ebindall[ind, 6:9, inputProb] # i.e. E36 E46 E56, ngb of x6
		
		
		
			
		# note the syntax: conditional_prob_on(PAstate, Ematrix, Wbind, omega):


		# below for factor node P123
		P123 = np.zeros((2,2,2)) # [ p(x3=0|x1 x2), p(x3=1|x1 x2)]
		P123[:,0,0]=[1-conditional_prob_on(Pa3[0], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[0], E3, wrong_binding, omegavec[0:2])]
		P123[:,0,1]=[1-conditional_prob_on(Pa3[1], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[1], E3, wrong_binding, omegavec[0:2])]
		P123[:,1,0]=[1-conditional_prob_on(Pa3[2], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[2], E3, wrong_binding, omegavec[0:2])]
		P123[:,1,1]=[1-conditional_prob_on(Pa3[3], E3, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa3[3], E3, wrong_binding, omegavec[0:2])]


		G.addFacNode(P123,x3,x1,x2)

		# below for factor node P124
		P124 = np.zeros((2,2,2)) # p(x4|x1 x2)
		P124[:,0,0]=[1-conditional_prob_on(Pa4[0], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[0], E4, wrong_binding, omegavec[0:2])]
		P124[:,0,1]=[1-conditional_prob_on(Pa4[1], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[1], E4, wrong_binding, omegavec[0:2])]
		P124[:,1,0]=[1-conditional_prob_on(Pa4[2], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[2], E4, wrong_binding, omegavec[0:2])]
		P124[:,1,1]=[1-conditional_prob_on(Pa4[3], E4, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa4[3], E4, wrong_binding, omegavec[0:2])]


		G.addFacNode(P124,x4,x1,x2)

		# below for factor node P125
		P125 = np.zeros((2,2,2)) # p(x5|x1 x2)
		P125[:,0,0]=[1-conditional_prob_on(Pa5[0], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[0], E5, wrong_binding, omegavec[0:2])]
		P125[:,0,1]=[1-conditional_prob_on(Pa5[1], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[1], E5, wrong_binding, omegavec[0:2])]
		P125[:,1,0]=[1-conditional_prob_on(Pa5[2], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[2], E5, wrong_binding, omegavec[0:2])]
		P125[:,1,1]=[1-conditional_prob_on(Pa5[3], E5, wrong_binding, omegavec[0:2]), conditional_prob_on(Pa5[3], E5, wrong_binding, omegavec[0:2])]


		G.addFacNode(P125,x5,x1,x2)


		# below for factor node P3456
		P3456 = np.zeros((2,2,2,2)) # p(x6|x3 x4 x5)
		#Pa 6 encodes (x3,x4,x5)= 000, 001, 010, 011, 100, 101, 110, 111
		P3456[:,0,0,0]=[1-conditional_prob_on(Pa6[0], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[0], E6, wrong_binding, omegavec[2:5])]
		P3456[:,0,0,1]=[1-conditional_prob_on(Pa6[1], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[1], E6, wrong_binding, omegavec[2:5])]
		P3456[:,0,1,0]=[1-conditional_prob_on(Pa6[2], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[2], E6, wrong_binding, omegavec[2:5])]
		P3456[:,0,1,1]=[1-conditional_prob_on(Pa6[3], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[3], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,0,0]=[1-conditional_prob_on(Pa6[4], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[4], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,0,1]=[1-conditional_prob_on(Pa6[5], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[5], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,1,0]=[1-conditional_prob_on(Pa6[6], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[6], E6, wrong_binding, omegavec[2:5])]
		P3456[:,1,1,1]=[1-conditional_prob_on(Pa6[7], E6, wrong_binding, omegavec[2:5]), conditional_prob_on(Pa6[7], E6, wrong_binding, omegavec[2:5])]

		G.addFacNode(P3456,x6,x3,x4,x5)


		

		brute = G.bruteForce()
		distx6 = G.marginalizeBrute(brute, 'x6')
		
			
		marginal6[0]= float(distx6[0]) # x6 off
		marginal6[1]= float(distx6[1]) # x6 on


	

		# Calculate P612 = P(x6| x1 x2). 
		#First marginalize x3. 
		P61245 = np.zeros((2,2,2,2,2)) # P(x6| x1 x2 x4 x5)
		P61245[0,0,0,0,0] = P3456[0,0,0,0]*P123[0,0,0] +  P3456[0,1,0,0]*P123[1,0,0]
		P61245[0,1,0,0,0] = P3456[0,0,0,0]*P123[0,1,0] +  P3456[0,1,0,0]*P123[1,1,0]
		P61245[0,0,1,0,0] = P3456[0,0,0,0]*P123[0,0,1] +  P3456[0,1,0,0]*P123[1,0,1]
		P61245[0,1,1,0,0] = P3456[0,0,0,0]*P123[0,1,1] +  P3456[0,1,0,0]*P123[1,1,1]

		P61245[1,0,0,0,0] = P3456[1,0,0,0]*P123[0,0,0] +  P3456[1,1,0,0]*P123[1,0,0]
		P61245[1,1,0,0,0] = P3456[1,0,0,0]*P123[0,1,0] +  P3456[1,1,0,0]*P123[1,1,0]
		P61245[1,0,1,0,0] = P3456[1,0,0,0]*P123[0,0,1] +  P3456[1,1,0,0]*P123[1,0,1]
		P61245[1,1,1,0,0] = P3456[1,0,0,0]*P123[0,1,1] +  P3456[1,1,0,0]*P123[1,1,1]

		P61245[0,0,0,1,0] = P3456[0,0,1,0]*P123[0,0,0] +  P3456[0,1,1,0]*P123[1,0,0]
		P61245[0,1,0,1,0] = P3456[0,0,1,0]*P123[0,1,0] +  P3456[0,1,1,0]*P123[1,1,0]
		P61245[0,0,1,1,0] = P3456[0,0,1,0]*P123[0,0,1] +  P3456[0,1,1,0]*P123[1,0,1]
		P61245[0,1,1,1,0] = P3456[0,0,1,0]*P123[0,1,1] +  P3456[0,1,1,0]*P123[1,1,1]

		P61245[1,0,0,1,0] = P3456[1,0,1,0]*P123[0,0,0] +  P3456[1,1,1,0]*P123[1,0,0]
		P61245[1,1,0,1,0] = P3456[1,0,1,0]*P123[0,1,0] +  P3456[1,1,1,0]*P123[1,1,0]
		P61245[1,0,1,1,0] = P3456[1,0,1,0]*P123[0,0,1] +  P3456[1,1,1,0]*P123[1,0,1]
		P61245[1,1,1,1,0] = P3456[1,0,1,0]*P123[0,1,1] +  P3456[1,1,1,0]*P123[1,1,1]

		P61245[0,0,0,0,1] = P3456[0,0,0,1]*P123[0,0,0] +  P3456[0,1,0,1]*P123[1,0,0]
		P61245[0,1,0,0,1] = P3456[0,0,0,1]*P123[0,1,0] +  P3456[0,1,0,1]*P123[1,1,0]
		P61245[0,0,1,0,1] = P3456[0,0,0,1]*P123[0,0,1] +  P3456[0,1,0,1]*P123[1,0,1]
		P61245[0,1,1,0,1] = P3456[0,0,0,1]*P123[0,1,1] +  P3456[0,1,0,1]*P123[1,1,1]

		P61245[1,0,0,0,1] = P3456[1,0,0,1]*P123[0,0,0] +  P3456[1,1,0,1]*P123[1,0,0]
		P61245[1,1,0,0,1] = P3456[1,0,0,1]*P123[0,1,0] +  P3456[1,1,0,1]*P123[1,1,0]
		P61245[1,0,1,0,1] = P3456[1,0,0,1]*P123[0,0,1] +  P3456[1,1,0,1]*P123[1,0,1]
		P61245[1,1,1,0,1] = P3456[1,0,0,1]*P123[0,1,1] +  P3456[1,1,0,1]*P123[1,1,1]

		P61245[0,0,0,1,1] = P3456[0,0,1,1]*P123[0,0,0] +  P3456[0,1,1,1]*P123[1,0,0]
		P61245[0,1,0,1,1] = P3456[0,0,1,1]*P123[0,1,0] +  P3456[0,1,1,1]*P123[1,1,0]
		P61245[0,0,1,1,1] = P3456[0,0,1,1]*P123[0,0,1] +  P3456[0,1,1,1]*P123[1,0,1]
		P61245[0,1,1,1,1] = P3456[0,0,1,1]*P123[0,1,1] +  P3456[0,1,1,1]*P123[1,1,1]

		P61245[1,0,0,1,1] = P3456[1,0,1,1]*P123[0,0,0] +  P3456[1,1,1,1]*P123[1,0,0]
		P61245[1,1,0,1,1] = P3456[1,0,1,1]*P123[0,1,0] +  P3456[1,1,1,1]*P123[1,1,0]
		P61245[1,0,1,1,1] = P3456[1,0,1,1]*P123[0,0,1] +  P3456[1,1,1,1]*P123[1,0,1]
		P61245[1,1,1,1,1] = P3456[1,0,1,1]*P123[0,1,1] +  P3456[1,1,1,1]*P123[1,1,1]


		# Calculate P6125 = P(x6| x1 x2 x5). Then marginalize x4. 
		P6125 = np.zeros((2,2,2,2)) # P(x6| x1 x2 x5)
		P6125[0,0,0,0] = P61245[0,0,0,0,0]*P124[0,0,0] + P61245[0,0,0,1,0]*P124[1,0,0]
		P6125[0,0,0,1] = P61245[0,0,0,0,1]*P124[0,0,0] + P61245[0,0,0,1,1]*P124[1,0,0]

		P6125[1,0,0,0] = P61245[1,0,0,0,0]*P124[0,0,0] + P61245[1,0,0,1,0]*P124[1,0,0]
		P6125[1,0,0,1] = P61245[1,0,0,0,1]*P124[0,0,0] + P61245[1,0,0,1,1]*P124[1,0,0]

		P6125[0,1,0,0] = P61245[0,1,0,0,0]*P124[0,1,0] + P61245[0,1,0,1,0]*P124[1,1,0]
		P6125[0,1,0,1] = P61245[0,1,0,0,1]*P124[0,1,0] + P61245[0,1,0,1,1]*P124[1,1,0]

		P6125[1,1,0,0] = P61245[1,1,0,0,0]*P124[0,1,0] + P61245[1,1,0,1,0]*P124[1,1,0]
		P6125[1,1,0,1] = P61245[1,1,0,0,1]*P124[0,1,0] + P61245[1,1,0,1,1]*P124[1,1,0]

		P6125[0,0,1,0] = P61245[0,0,1,0,0]*P124[0,0,1] + P61245[0,0,1,1,0]*P124[1,0,1]
		P6125[0,0,1,1] = P61245[0,0,1,0,1]*P124[0,0,1] + P61245[0,0,1,1,1]*P124[1,0,1]

		P6125[1,0,1,0] = P61245[1,0,1,0,0]*P124[0,0,1] + P61245[1,0,1,1,0]*P124[1,0,1]
		P6125[1,0,1,1] = P61245[1,0,1,0,1]*P124[0,0,1] + P61245[1,0,1,1,1]*P124[1,0,1]

		P6125[0,1,1,0] = P61245[0,1,1,0,0]*P124[0,1,1] + P61245[0,1,1,1,0]*P124[1,1,1]
		P6125[0,1,1,1] = P61245[0,1,1,0,1]*P124[0,1,1] + P61245[0,1,1,1,1]*P124[1,1,1]

		P6125[1,1,1,0] = P61245[1,1,1,0,0]*P124[0,1,1] + P61245[1,1,1,1,0]*P124[1,1,1]
		P6125[1,1,1,1] = P61245[1,1,1,0,1]*P124[0,1,1] + P61245[1,1,1,1,1]*P124[1,1,1]


		# Calculate P612 = P(x6| x1 x2). Then marginalize x5. 
		P612 = np.zeros((2,2,2)) # P(x6| x1 x2)
		P612[0,0,0] = P6125[0,0,0,0]*P125[0,0,0] + P6125[0,0,0,1]*P125[1,0,0]
		P612[1,0,0] = P6125[1,0,0,0]*P125[0,0,0] + P6125[1,0,0,1]*P125[1,0,0]

		P612[0,1,0] = P6125[0,1,0,0]*P125[0,1,0] + P6125[0,1,0,1]*P125[1,1,0]
		P612[1,1,0] = P6125[1,1,0,0]*P125[0,1,0] + P6125[1,1,0,1]*P125[1,1,0]

		P612[0,0,1] = P6125[0,0,1,0]*P125[0,0,1] + P6125[0,0,1,1]*P125[1,0,1]
		P612[1,0,1] = P6125[1,0,1,0]*P125[0,0,1] + P6125[1,0,1,1]*P125[1,0,1]

		P612[0,1,1] = P6125[0,1,1,0]*P125[0,1,1] + P6125[0,1,1,1]*P125[1,1,1]
		P612[1,1,1] = P6125[1,1,1,0]*P125[0,1,1] + P6125[1,1,1,1]*P125[1,1,1]

		P612 = P612 + 10**-4
		'''
		P12 = np.outer(P1,P2)
		P612joint = np.zeros((2,2,2))
		tmp = np.array(list(itertools.product([[0],[1]], repeat = 2)))

		for i in xrange(tmp.shape[0]):
			i1 = tmp[i][0][0]
			i2 = tmp[i][1][0]
			P612joint[0,i1,i2] = P612[0,i1,i2]*P12[i1,i2]
			P612joint[1,i1,i2] = P612[1,i1,i2]*P12[i1,i2]



		P6 = np.sum(np.sum(P612joint, axis = 1), axis = 1)
		marginal6 = np.array(P6)
		
		P612 = P612 + 1e-8 

		print 'P6='
		print P6
		
		'''


		
		
	
		MI[ind, inputProb] =  np.dot( np.transpose(P2), np.sum(P1*np.multiply(P612[0,:,:], np.log2(P612[0,:,:]/marginal6[0])) + P1*np.multiply(P612[1,:,:], np.log2(P612[1,:,:]/marginal6[1])), axis = 0))
		





		#MI[ind, inputProb] = np.dot( np.transpose(P2), np.sum(P1*np.multiply(P124[0,:,:], np.log(P124[0,:,:]/marginal4[0])) + P1*np.multiply(P124[1,:,:], np.log(P124[1,:,:]/marginal4[1])), axis = 0))
		Ebindall[ind+1,:, inputProb] = Ebindall[ind, :, inputProb] - learning_eta*InfoMaxGD(P1, P2, P612, marginal6,  P3456, P123, P124, P125, Ebindall[ind, :, inputProb], wrong_binding, omegavec, regularization)
		G.reset()	
		




#print MI.shape
#print MI
print Ebindall[NGD,: ,len(Pinput1)-1]

MImax = np.amax(MI, axis=0)

print MImax
file_name = create_name(learning_eta, regularization, NGD) 
name = os.path.join(dir_name, file_name)
pickle.dump( {'BindingEnergy':Ebindall, 'MIall': MI, 'MImax': MImax}, open(name, 'wb'))


			




#print MI.shape
#print Ebindall

runtick = np.linspace(1,NGD, num=NGD)
plt.plot(runtick, MI[:,0], runtick, MI[:,1], '--',runtick, MI[:,2], runtick, MI[:,3],  linewidth=3.0)
plt.xlabel('Gradient ascent runs', fontsize = fl+4)
plt.ylabel('Mutual Information $MI(x_{in};\, x_6)$', fontsize = fl+4)
plt.xticks(fontsize = ft+4)
plt.yticks(fontsize = ft+4)
plt.legend([r'$P(x_{{in}}=1)=0.2$', r'$P(x_{{in}}=1)=0.32$', r'$P(x_{{in}}=1)=0.4$', r'$P(x_{{in}}=1)=0.8$'], shadow=True, fancybox=True, loc=(0.5, 0.3), fontsize=14+2)
plt.show()

#plt.show(block = True)
'''
full_str = 'InfoMax231LearningCurve'
fig_name = os.path.join(dir_name, full_str )
fig.savefig(fig_name+'.eps', bbox_inches='tight')
#fig.savefig(fig_name+'.eps')
#fig.savefig(fig_name+'.png')
#fig.savefig(fig_name+'.pdf', bbox_inches='tight')
fig.savefig(fig_name+'.pdf')
#fig.savefig(fig_name+'.eps')

'''


